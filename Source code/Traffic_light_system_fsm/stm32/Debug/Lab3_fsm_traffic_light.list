
Lab3_fsm_traffic_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a80  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b8c  08002b8c  00003b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bb0  08002bb0  00004034  2**0
                  CONTENTS
  4 .ARM          00000000  08002bb0  08002bb0  00004034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bb0  08002bb0  00004034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bb0  08002bb0  00003bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bb4  08002bb4  00003bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08002bb8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000034  08002bec  00004034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002bec  00004100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089c3  00000000  00000000  0000405d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfd  00000000  00000000  0000ca20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0000e720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000082a  00000000  00000000  0000f1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171bb  00000000  00000000  0000fa1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2e6  00000000  00000000  00026bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082759  00000000  00000000  00033ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6614  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a18  00000000  00000000  000b6658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000b9070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b74 	.word	0x08002b74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08002b74 	.word	0x08002b74

0800014c <button_init>:





void button_init(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
    for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e02a      	b.n	80001ae <button_init+0x62>
        buttonState[i] = BUTTON_RELEASED;
 8000158:	4a19      	ldr	r2, [pc, #100]	@ (80001c0 <button_init+0x74>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	2200      	movs	r2, #0
 8000160:	701a      	strb	r2, [r3, #0]
        flagForButtonPress[i] = 0;
 8000162:	4a18      	ldr	r2, [pc, #96]	@ (80001c4 <button_init+0x78>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4413      	add	r3, r2
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]
        flagForButtonPress_2s[i] = 0;
 800016c:	4a16      	ldr	r2, [pc, #88]	@ (80001c8 <button_init+0x7c>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	4413      	add	r3, r2
 8000172:	2200      	movs	r2, #0
 8000174:	701a      	strb	r2, [r3, #0]
        counterForButtonPress_2s[i] = 0;
 8000176:	4a15      	ldr	r2, [pc, #84]	@ (80001cc <button_init+0x80>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2100      	movs	r1, #0
 800017c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000180:	4a13      	ldr	r2, [pc, #76]	@ (80001d0 <button_init+0x84>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	2201      	movs	r2, #1
 8000188:	701a      	strb	r2, [r3, #0]
        debounceButtonBuffer0[i] = BUTTON_IS_RELEASED;
 800018a:	4a12      	ldr	r2, [pc, #72]	@ (80001d4 <button_init+0x88>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	4413      	add	r3, r2
 8000190:	2201      	movs	r2, #1
 8000192:	701a      	strb	r2, [r3, #0]
        debounceButtonBuffer1[i] = BUTTON_IS_RELEASED;
 8000194:	4a10      	ldr	r2, [pc, #64]	@ (80001d8 <button_init+0x8c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4413      	add	r3, r2
 800019a:	2201      	movs	r2, #1
 800019c:	701a      	strb	r2, [r3, #0]
        debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 800019e:	4a0f      	ldr	r2, [pc, #60]	@ (80001dc <button_init+0x90>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4413      	add	r3, r2
 80001a4:	2201      	movs	r2, #1
 80001a6:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < NO_OF_BUTTONS; i++){
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	3301      	adds	r3, #1
 80001ac:	607b      	str	r3, [r7, #4]
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	ddd1      	ble.n	8000158 <button_init+0xc>
    }
}
 80001b4:	bf00      	nop
 80001b6:	bf00      	nop
 80001b8:	370c      	adds	r7, #12
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	20000070 	.word	0x20000070
 80001c4:	20000060 	.word	0x20000060
 80001c8:	20000064 	.word	0x20000064
 80001cc:	20000068 	.word	0x20000068
 80001d0:	2000005c 	.word	0x2000005c
 80001d4:	20000050 	.word	0x20000050
 80001d8:	20000054 	.word	0x20000054
 80001dc:	20000058 	.word	0x20000058

080001e0 <is_button_pressed>:




//function
int is_button_pressed(uint8_t index){
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2b02      	cmp	r3, #2
 80001ee:	d901      	bls.n	80001f4 <is_button_pressed+0x14>
 80001f0:	2300      	movs	r3, #0
 80001f2:	e00b      	b.n	800020c <is_button_pressed+0x2c>
	if(flagForButtonPress[index]){
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	4a08      	ldr	r2, [pc, #32]	@ (8000218 <is_button_pressed+0x38>)
 80001f8:	5cd3      	ldrb	r3, [r2, r3]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d005      	beq.n	800020a <is_button_pressed+0x2a>
		flagForButtonPress[index] = 0;
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	4a05      	ldr	r2, [pc, #20]	@ (8000218 <is_button_pressed+0x38>)
 8000202:	2100      	movs	r1, #0
 8000204:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000206:	2301      	movs	r3, #1
 8000208:	e000      	b.n	800020c <is_button_pressed+0x2c>
	}
	return 0;
 800020a:	2300      	movs	r3, #0
}
 800020c:	4618      	mov	r0, r3
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	bc80      	pop	{r7}
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	20000060 	.word	0x20000060

0800021c <button_reading>:
//int is_button_held(uint8_t index){
//    if(index >= NO_OF_BUTTONS) return 0;
//    return (buttonBuffer[index] == BUTTON_IS_PRESSED);
//}

void button_reading(void){
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 8000222:	2300      	movs	r3, #0
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	e07d      	b.n	8000324 <button_reading+0x108>
        debounceButtonBuffer0[i] = debounceButtonBuffer1[i];
 8000228:	79fa      	ldrb	r2, [r7, #7]
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	4942      	ldr	r1, [pc, #264]	@ (8000338 <button_reading+0x11c>)
 800022e:	5c89      	ldrb	r1, [r1, r2]
 8000230:	4a42      	ldr	r2, [pc, #264]	@ (800033c <button_reading+0x120>)
 8000232:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 8000234:	79fa      	ldrb	r2, [r7, #7]
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4941      	ldr	r1, [pc, #260]	@ (8000340 <button_reading+0x124>)
 800023a:	5c89      	ldrb	r1, [r1, r2]
 800023c:	4a3e      	ldr	r2, [pc, #248]	@ (8000338 <button_reading+0x11c>)
 800023e:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4a40      	ldr	r2, [pc, #256]	@ (8000344 <button_reading+0x128>)
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	493f      	ldr	r1, [pc, #252]	@ (8000348 <button_reading+0x12c>)
 800024c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000250:	79fc      	ldrb	r4, [r7, #7]
 8000252:	4619      	mov	r1, r3
 8000254:	4610      	mov	r0, r2
 8000256:	f001 fc5f 	bl	8001b18 <HAL_GPIO_ReadPin>
 800025a:	4603      	mov	r3, r0
 800025c:	461a      	mov	r2, r3
 800025e:	4b38      	ldr	r3, [pc, #224]	@ (8000340 <button_reading+0x124>)
 8000260:	551a      	strb	r2, [r3, r4]

        if(debounceButtonBuffer0[i] == debounceButtonBuffer1[i] && debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	4a35      	ldr	r2, [pc, #212]	@ (800033c <button_reading+0x120>)
 8000266:	5cd2      	ldrb	r2, [r2, r3]
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	4933      	ldr	r1, [pc, #204]	@ (8000338 <button_reading+0x11c>)
 800026c:	5ccb      	ldrb	r3, [r1, r3]
 800026e:	429a      	cmp	r2, r3
 8000270:	d155      	bne.n	800031e <button_reading+0x102>
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	4a30      	ldr	r2, [pc, #192]	@ (8000338 <button_reading+0x11c>)
 8000276:	5cd2      	ldrb	r2, [r2, r3]
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	4931      	ldr	r1, [pc, #196]	@ (8000340 <button_reading+0x124>)
 800027c:	5ccb      	ldrb	r3, [r1, r3]
 800027e:	429a      	cmp	r2, r3
 8000280:	d14d      	bne.n	800031e <button_reading+0x102>
            // Trạng thái nút nhấn đã ổn định
            if(buttonBuffer[i] != debounceButtonBuffer2[i]){
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	4a31      	ldr	r2, [pc, #196]	@ (800034c <button_reading+0x130>)
 8000286:	5cd2      	ldrb	r2, [r2, r3]
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	492d      	ldr	r1, [pc, #180]	@ (8000340 <button_reading+0x124>)
 800028c:	5ccb      	ldrb	r3, [r1, r3]
 800028e:	429a      	cmp	r2, r3
 8000290:	d022      	beq.n	80002d8 <button_reading+0xbc>
                // Trạng thái nút nhấn đã thay đổi
                buttonBuffer[i] = debounceButtonBuffer2[i];
 8000292:	79fa      	ldrb	r2, [r7, #7]
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	492a      	ldr	r1, [pc, #168]	@ (8000340 <button_reading+0x124>)
 8000298:	5c89      	ldrb	r1, [r1, r2]
 800029a:	4a2c      	ldr	r2, [pc, #176]	@ (800034c <button_reading+0x130>)
 800029c:	54d1      	strb	r1, [r2, r3]

                if(debounceButtonBuffer2[i] == BUTTON_IS_PRESSED){
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4a27      	ldr	r2, [pc, #156]	@ (8000340 <button_reading+0x124>)
 80002a2:	5cd3      	ldrb	r3, [r2, r3]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d109      	bne.n	80002bc <button_reading+0xa0>
                    // Nút nhấn chuyển từ thả sang nhấn
                    flagForButtonPress[i] = 1;
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	4a29      	ldr	r2, [pc, #164]	@ (8000350 <button_reading+0x134>)
 80002ac:	2101      	movs	r1, #1
 80002ae:	54d1      	strb	r1, [r2, r3]
                    counterForButtonPress_2s[i] = DURATION_FOR_AUTO_INCREASING; // Đặt bộ đếm
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	4a28      	ldr	r2, [pc, #160]	@ (8000354 <button_reading+0x138>)
 80002b4:	21c8      	movs	r1, #200	@ 0xc8
 80002b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80002ba:	e030      	b.n	800031e <button_reading+0x102>
                } else {
                    // Nút nhấn chuyển từ nhấn sang thả
                    counterForButtonPress_2s[i] = 0;
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	4a25      	ldr	r2, [pc, #148]	@ (8000354 <button_reading+0x138>)
 80002c0:	2100      	movs	r1, #0
 80002c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    flagForButtonPress[i] = 0;
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	4a21      	ldr	r2, [pc, #132]	@ (8000350 <button_reading+0x134>)
 80002ca:	2100      	movs	r1, #0
 80002cc:	54d1      	strb	r1, [r2, r3]
                    flagForButtonPress_2s[i] = 0;
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	4a21      	ldr	r2, [pc, #132]	@ (8000358 <button_reading+0x13c>)
 80002d2:	2100      	movs	r1, #0
 80002d4:	54d1      	strb	r1, [r2, r3]
 80002d6:	e022      	b.n	800031e <button_reading+0x102>
//                            flagForButtonPress_2s[i] = 1;
//                        }
//                    }
//                }
//            }
				else if(debounceButtonBuffer2[i] == BUTTON_IS_PRESSED && counterForButtonPress_2s[i] > 0){
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	4a19      	ldr	r2, [pc, #100]	@ (8000340 <button_reading+0x124>)
 80002dc:	5cd3      	ldrb	r3, [r2, r3]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d11d      	bne.n	800031e <button_reading+0x102>
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000354 <button_reading+0x138>)
 80002e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d017      	beq.n	800031e <button_reading+0x102>
								counterForButtonPress_2s[i]--;
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	4a18      	ldr	r2, [pc, #96]	@ (8000354 <button_reading+0x138>)
 80002f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80002f6:	3a01      	subs	r2, #1
 80002f8:	b291      	uxth	r1, r2
 80002fa:	4a16      	ldr	r2, [pc, #88]	@ (8000354 <button_reading+0x138>)
 80002fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
								if(counterForButtonPress_2s[i] == 0){
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	4a14      	ldr	r2, [pc, #80]	@ (8000354 <button_reading+0x138>)
 8000304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d108      	bne.n	800031e <button_reading+0x102>
//									flagForButtonPress_2s[i] = 1;
									flagForButtonPress[i] = 1;
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	4a10      	ldr	r2, [pc, #64]	@ (8000350 <button_reading+0x134>)
 8000310:	2101      	movs	r1, #1
 8000312:	54d1      	strb	r1, [r2, r3]
									counterForButtonPress_2s[i] = DURATION_FOR_AUTO_INCREASING;
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	4a0f      	ldr	r2, [pc, #60]	@ (8000354 <button_reading+0x138>)
 8000318:	21c8      	movs	r1, #200	@ 0xc8
 800031a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	3301      	adds	r3, #1
 8000322:	71fb      	strb	r3, [r7, #7]
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	2b02      	cmp	r3, #2
 8000328:	f67f af7e 	bls.w	8000228 <button_reading+0xc>

								}
							}
        }
    }
}
 800032c:	bf00      	nop
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	bd90      	pop	{r4, r7, pc}
 8000336:	bf00      	nop
 8000338:	20000054 	.word	0x20000054
 800033c:	20000050 	.word	0x20000050
 8000340:	20000058 	.word	0x20000058
 8000344:	20000000 	.word	0x20000000
 8000348:	2000000c 	.word	0x2000000c
 800034c:	2000005c 	.word	0x2000005c
 8000350:	20000060 	.word	0x20000060
 8000354:	20000068 	.word	0x20000068
 8000358:	20000064 	.word	0x20000064

0800035c <fsm_automatic_run>:
#include "main.h"
#include "fsm_manual.h"



void fsm_automatic_run(){
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	switch(status){
 8000360:	4b28      	ldr	r3, [pc, #160]	@ (8000404 <fsm_automatic_run+0xa8>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3b0b      	subs	r3, #11
 8000366:	2b03      	cmp	r3, #3
 8000368:	d842      	bhi.n	80003f0 <fsm_automatic_run+0x94>
 800036a:	a201      	add	r2, pc, #4	@ (adr r2, 8000370 <fsm_automatic_run+0x14>)
 800036c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000370:	08000397 	.word	0x08000397
 8000374:	080003b5 	.word	0x080003b5
 8000378:	080003d3 	.word	0x080003d3
 800037c:	08000381 	.word	0x08000381
		case INIT:
			//TODO
			state_init();
 8000380:	f000 fcf2 	bl	8000d68 <state_init>
			status = AUTO_RED;
 8000384:	4b1f      	ldr	r3, [pc, #124]	@ (8000404 <fsm_automatic_run+0xa8>)
 8000386:	220b      	movs	r2, #11
 8000388:	601a      	str	r2, [r3, #0]
			setTimer1(duration_time_of_AUTO_RED);
 800038a:	4b1f      	ldr	r3, [pc, #124]	@ (8000408 <fsm_automatic_run+0xac>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f000 ff4a 	bl	8001228 <setTimer1>
			break;
 8000394:	e033      	b.n	80003fe <fsm_automatic_run+0xa2>
		case AUTO_RED:
			//TODO
			state_red();
 8000396:	f000 fcfd 	bl	8000d94 <state_red>
			if(timer1_flag == 1){
 800039a:	4b1c      	ldr	r3, [pc, #112]	@ (800040c <fsm_automatic_run+0xb0>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d128      	bne.n	80003f4 <fsm_automatic_run+0x98>
				status = AUTO_GREEN;
 80003a2:	4b18      	ldr	r3, [pc, #96]	@ (8000404 <fsm_automatic_run+0xa8>)
 80003a4:	220c      	movs	r2, #12
 80003a6:	601a      	str	r2, [r3, #0]
				setTimer1(duration_time_of_AUTO_GREEN);
 80003a8:	4b19      	ldr	r3, [pc, #100]	@ (8000410 <fsm_automatic_run+0xb4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 ff3b 	bl	8001228 <setTimer1>
			}

			break;
 80003b2:	e01f      	b.n	80003f4 <fsm_automatic_run+0x98>
		case AUTO_GREEN:
			//TODO
			state_green();
 80003b4:	f000 fd04 	bl	8000dc0 <state_green>
			if(timer1_flag == 1){
 80003b8:	4b14      	ldr	r3, [pc, #80]	@ (800040c <fsm_automatic_run+0xb0>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d11b      	bne.n	80003f8 <fsm_automatic_run+0x9c>
				status = AUTO_YELLOW;
 80003c0:	4b10      	ldr	r3, [pc, #64]	@ (8000404 <fsm_automatic_run+0xa8>)
 80003c2:	220d      	movs	r2, #13
 80003c4:	601a      	str	r2, [r3, #0]
				setTimer1(duration_time_of_AUTO_YELLOW);
 80003c6:	4b13      	ldr	r3, [pc, #76]	@ (8000414 <fsm_automatic_run+0xb8>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 ff2c 	bl	8001228 <setTimer1>
			}

			break;
 80003d0:	e012      	b.n	80003f8 <fsm_automatic_run+0x9c>
		case AUTO_YELLOW:
			//TODO
			state_yellow();
 80003d2:	f000 fd0b 	bl	8000dec <state_yellow>

			if(timer1_flag == 1){
 80003d6:	4b0d      	ldr	r3, [pc, #52]	@ (800040c <fsm_automatic_run+0xb0>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d10e      	bne.n	80003fc <fsm_automatic_run+0xa0>
				status = AUTO_RED;
 80003de:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <fsm_automatic_run+0xa8>)
 80003e0:	220b      	movs	r2, #11
 80003e2:	601a      	str	r2, [r3, #0]
				setTimer1(duration_time_of_AUTO_RED);
 80003e4:	4b08      	ldr	r3, [pc, #32]	@ (8000408 <fsm_automatic_run+0xac>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 ff1d 	bl	8001228 <setTimer1>
			}

			break;
 80003ee:	e005      	b.n	80003fc <fsm_automatic_run+0xa0>
		default:
			break;
 80003f0:	bf00      	nop
 80003f2:	e004      	b.n	80003fe <fsm_automatic_run+0xa2>
			break;
 80003f4:	bf00      	nop
 80003f6:	e002      	b.n	80003fe <fsm_automatic_run+0xa2>
			break;
 80003f8:	bf00      	nop
 80003fa:	e000      	b.n	80003fe <fsm_automatic_run+0xa2>
			break;
 80003fc:	bf00      	nop

	}
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000074 	.word	0x20000074
 8000408:	20000014 	.word	0x20000014
 800040c:	200000f0 	.word	0x200000f0
 8000410:	2000001c 	.word	0x2000001c
 8000414:	20000018 	.word	0x20000018

08000418 <fsm_automatic_run1>:

void fsm_automatic_run1(){
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
    switch(status1){
 800041c:	4b29      	ldr	r3, [pc, #164]	@ (80004c4 <fsm_automatic_run1+0xac>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	3b0b      	subs	r3, #11
 8000422:	2b04      	cmp	r3, #4
 8000424:	d844      	bhi.n	80004b0 <fsm_automatic_run1+0x98>
 8000426:	a201      	add	r2, pc, #4	@ (adr r2, 800042c <fsm_automatic_run1+0x14>)
 8000428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042c:	08000457 	.word	0x08000457
 8000430:	08000475 	.word	0x08000475
 8000434:	08000493 	.word	0x08000493
 8000438:	080004b1 	.word	0x080004b1
 800043c:	08000441 	.word	0x08000441
        case INIT1:
            //TODO
            state_init1();
 8000440:	f000 fcea 	bl	8000e18 <state_init1>
            status1 = AUTO_GREEN;
 8000444:	4b1f      	ldr	r3, [pc, #124]	@ (80004c4 <fsm_automatic_run1+0xac>)
 8000446:	220c      	movs	r2, #12
 8000448:	601a      	str	r2, [r3, #0]
            setTimer2(duration_time_of_AUTO_GREEN);
 800044a:	4b1f      	ldr	r3, [pc, #124]	@ (80004c8 <fsm_automatic_run1+0xb0>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f000 ff04 	bl	800125c <setTimer2>
            break;
 8000454:	e033      	b.n	80004be <fsm_automatic_run1+0xa6>
        case AUTO_RED:
            //TODO
            state_red1();
 8000456:	f000 fcf5 	bl	8000e44 <state_red1>
            if(timer2_flag == 1){
 800045a:	4b1c      	ldr	r3, [pc, #112]	@ (80004cc <fsm_automatic_run1+0xb4>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d128      	bne.n	80004b4 <fsm_automatic_run1+0x9c>
                status1 = AUTO_GREEN;
 8000462:	4b18      	ldr	r3, [pc, #96]	@ (80004c4 <fsm_automatic_run1+0xac>)
 8000464:	220c      	movs	r2, #12
 8000466:	601a      	str	r2, [r3, #0]
                setTimer2(duration_time_of_AUTO_GREEN);
 8000468:	4b17      	ldr	r3, [pc, #92]	@ (80004c8 <fsm_automatic_run1+0xb0>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f000 fef5 	bl	800125c <setTimer2>
            }
            break;
 8000472:	e01f      	b.n	80004b4 <fsm_automatic_run1+0x9c>
        case AUTO_GREEN:
            //TODO
            state_green1();
 8000474:	f000 fcfc 	bl	8000e70 <state_green1>

            if(timer2_flag == 1){
 8000478:	4b14      	ldr	r3, [pc, #80]	@ (80004cc <fsm_automatic_run1+0xb4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d11b      	bne.n	80004b8 <fsm_automatic_run1+0xa0>
                status1 = AUTO_YELLOW;
 8000480:	4b10      	ldr	r3, [pc, #64]	@ (80004c4 <fsm_automatic_run1+0xac>)
 8000482:	220d      	movs	r2, #13
 8000484:	601a      	str	r2, [r3, #0]
                setTimer2(duration_time_of_AUTO_YELLOW);
 8000486:	4b12      	ldr	r3, [pc, #72]	@ (80004d0 <fsm_automatic_run1+0xb8>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4618      	mov	r0, r3
 800048c:	f000 fee6 	bl	800125c <setTimer2>
            }
            break;
 8000490:	e012      	b.n	80004b8 <fsm_automatic_run1+0xa0>
        case AUTO_YELLOW:
            //TODO
            state_yellow1();
 8000492:	f000 fd03 	bl	8000e9c <state_yellow1>

            if(timer2_flag == 1){
 8000496:	4b0d      	ldr	r3, [pc, #52]	@ (80004cc <fsm_automatic_run1+0xb4>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d10e      	bne.n	80004bc <fsm_automatic_run1+0xa4>
                status1 = AUTO_RED;
 800049e:	4b09      	ldr	r3, [pc, #36]	@ (80004c4 <fsm_automatic_run1+0xac>)
 80004a0:	220b      	movs	r2, #11
 80004a2:	601a      	str	r2, [r3, #0]
                setTimer2(duration_time_of_AUTO_RED);
 80004a4:	4b0b      	ldr	r3, [pc, #44]	@ (80004d4 <fsm_automatic_run1+0xbc>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 fed7 	bl	800125c <setTimer2>
            }
            break;
 80004ae:	e005      	b.n	80004bc <fsm_automatic_run1+0xa4>
        default:
            break;
 80004b0:	bf00      	nop
 80004b2:	e004      	b.n	80004be <fsm_automatic_run1+0xa6>
            break;
 80004b4:	bf00      	nop
 80004b6:	e002      	b.n	80004be <fsm_automatic_run1+0xa6>
            break;
 80004b8:	bf00      	nop
 80004ba:	e000      	b.n	80004be <fsm_automatic_run1+0xa6>
            break;
 80004bc:	bf00      	nop
    }
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000078 	.word	0x20000078
 80004c8:	2000001c 	.word	0x2000001c
 80004cc:	200000f4 	.word	0x200000f4
 80004d0:	20000018 	.word	0x20000018
 80004d4:	20000014 	.word	0x20000014

080004d8 <fsm_manual_run>:
//			blinkind_led_traffic_y();
//			setTimer6(50);
//		}
//}

void fsm_manual_run(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	switch(mode){
 80004dc:	4bb5      	ldr	r3, [pc, #724]	@ (80007b4 <fsm_manual_run+0x2dc>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b04      	cmp	r3, #4
 80004e2:	f200 8162 	bhi.w	80007aa <fsm_manual_run+0x2d2>
 80004e6:	a201      	add	r2, pc, #4	@ (adr r2, 80004ec <fsm_manual_run+0x14>)
 80004e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ec:	08000501 	.word	0x08000501
 80004f0:	08000525 	.word	0x08000525
 80004f4:	08000591 	.word	0x08000591
 80004f8:	08000701 	.word	0x08000701
 80004fc:	0800063d 	.word	0x0800063d
		case INIT_SYSTEM:
			  button_init();
 8000500:	f7ff fe24 	bl	800014c <button_init>
			  status = INIT;
 8000504:	4bac      	ldr	r3, [pc, #688]	@ (80007b8 <fsm_manual_run+0x2e0>)
 8000506:	220e      	movs	r2, #14
 8000508:	601a      	str	r2, [r3, #0]
			  status1 = INIT1;
 800050a:	4bac      	ldr	r3, [pc, #688]	@ (80007bc <fsm_manual_run+0x2e4>)
 800050c:	220f      	movs	r2, #15
 800050e:	601a      	str	r2, [r3, #0]
			  setTimer0(25);
 8000510:	2019      	movs	r0, #25
 8000512:	f000 fe6f 	bl	80011f4 <setTimer0>
			  setTimer6(50);
 8000516:	2032      	movs	r0, #50	@ 0x32
 8000518:	f000 feba 	bl	8001290 <setTimer6>
			  mode = NORMAL_MODE;
 800051c:	4ba5      	ldr	r3, [pc, #660]	@ (80007b4 <fsm_manual_run+0x2dc>)
 800051e:	2201      	movs	r2, #1
 8000520:	601a      	str	r2, [r3, #0]

			break;
 8000522:	e164      	b.n	80007ee <fsm_manual_run+0x316>
		case NORMAL_MODE:
				  update_2_led_7_seg_buffer_left(timer1_counter/100);
 8000524:	4ba6      	ldr	r3, [pc, #664]	@ (80007c0 <fsm_manual_run+0x2e8>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4aa6      	ldr	r2, [pc, #664]	@ (80007c4 <fsm_manual_run+0x2ec>)
 800052a:	fb82 1203 	smull	r1, r2, r2, r3
 800052e:	1152      	asrs	r2, r2, #5
 8000530:	17db      	asrs	r3, r3, #31
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	4618      	mov	r0, r3
 8000536:	f000 fba5 	bl	8000c84 <update_2_led_7_seg_buffer_left>
				  update_2_led_7_seg_buffer_right(timer2_counter/100);
 800053a:	4ba3      	ldr	r3, [pc, #652]	@ (80007c8 <fsm_manual_run+0x2f0>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4aa1      	ldr	r2, [pc, #644]	@ (80007c4 <fsm_manual_run+0x2ec>)
 8000540:	fb82 1203 	smull	r1, r2, r2, r3
 8000544:	1152      	asrs	r2, r2, #5
 8000546:	17db      	asrs	r3, r3, #31
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fbbe 	bl	8000ccc <update_2_led_7_seg_buffer_right>
				  fsm_automatic_run();
 8000550:	f7ff ff04 	bl	800035c <fsm_automatic_run>
				  fsm_automatic_run1();
 8000554:	f7ff ff60 	bl	8000418 <fsm_automatic_run1>


					if(is_button_pressed(0) == 1){
 8000558:	2000      	movs	r0, #0
 800055a:	f7ff fe41 	bl	80001e0 <is_button_pressed>
 800055e:	4603      	mov	r3, r0
 8000560:	2b01      	cmp	r3, #1
 8000562:	f040 8124 	bne.w	80007ae <fsm_manual_run+0x2d6>
						clearTimer1();
 8000566:	f000 fead 	bl	80012c4 <clearTimer1>
						clearTimer2();
 800056a:	f000 febb 	bl	80012e4 <clearTimer2>
						status = AUTO_RED;
 800056e:	4b92      	ldr	r3, [pc, #584]	@ (80007b8 <fsm_manual_run+0x2e0>)
 8000570:	220b      	movs	r2, #11
 8000572:	601a      	str	r2, [r3, #0]
						status1 = AUTO_RED;
 8000574:	4b91      	ldr	r3, [pc, #580]	@ (80007bc <fsm_manual_run+0x2e4>)
 8000576:	220b      	movs	r2, #11
 8000578:	601a      	str	r2, [r3, #0]
					    setTimer6(50);
 800057a:	2032      	movs	r0, #50	@ 0x32
 800057c:	f000 fe88 	bl	8001290 <setTimer6>
					    buffer_duration_time = duration_time_of_AUTO_RED;
 8000580:	4b92      	ldr	r3, [pc, #584]	@ (80007cc <fsm_manual_run+0x2f4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a92      	ldr	r2, [pc, #584]	@ (80007d0 <fsm_manual_run+0x2f8>)
 8000586:	6013      	str	r3, [r2, #0]
					    mode = MAN_RED_MODE;
 8000588:	4b8a      	ldr	r3, [pc, #552]	@ (80007b4 <fsm_manual_run+0x2dc>)
 800058a:	2202      	movs	r2, #2
 800058c:	601a      	str	r2, [r3, #0]

					}

			break;
 800058e:	e10e      	b.n	80007ae <fsm_manual_run+0x2d6>
		case MAN_RED_MODE:
					update_2_led_7_seg_buffer_left(mode);
 8000590:	4b88      	ldr	r3, [pc, #544]	@ (80007b4 <fsm_manual_run+0x2dc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fb75 	bl	8000c84 <update_2_led_7_seg_buffer_left>
					update_2_led_7_seg_buffer_right(buffer_duration_time/100);
 800059a:	4b8d      	ldr	r3, [pc, #564]	@ (80007d0 <fsm_manual_run+0x2f8>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a89      	ldr	r2, [pc, #548]	@ (80007c4 <fsm_manual_run+0x2ec>)
 80005a0:	fb82 1203 	smull	r1, r2, r2, r3
 80005a4:	1152      	asrs	r2, r2, #5
 80005a6:	17db      	asrs	r3, r3, #31
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fb8e 	bl	8000ccc <update_2_led_7_seg_buffer_right>

					if(timer6_flag == 1){
 80005b0:	4b88      	ldr	r3, [pc, #544]	@ (80007d4 <fsm_manual_run+0x2fc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d106      	bne.n	80005c6 <fsm_manual_run+0xee>
						blinkind_led_traffic_x();
 80005b8:	f000 fc86 	bl	8000ec8 <blinkind_led_traffic_x>
						blinkind_led_traffic_y();
 80005bc:	f000 fcc6 	bl	8000f4c <blinkind_led_traffic_y>
						setTimer6(50);
 80005c0:	2032      	movs	r0, #50	@ 0x32
 80005c2:	f000 fe65 	bl	8001290 <setTimer6>
					}
					if(is_button_pressed(0) == 1){
 80005c6:	2000      	movs	r0, #0
 80005c8:	f7ff fe0a 	bl	80001e0 <is_button_pressed>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d111      	bne.n	80005f6 <fsm_manual_run+0x11e>
						clearTimer6();
 80005d2:	f000 fe97 	bl	8001304 <clearTimer6>
						status = AUTO_YELLOW;
 80005d6:	4b78      	ldr	r3, [pc, #480]	@ (80007b8 <fsm_manual_run+0x2e0>)
 80005d8:	220d      	movs	r2, #13
 80005da:	601a      	str	r2, [r3, #0]
						status1 = AUTO_YELLOW;
 80005dc:	4b77      	ldr	r3, [pc, #476]	@ (80007bc <fsm_manual_run+0x2e4>)
 80005de:	220d      	movs	r2, #13
 80005e0:	601a      	str	r2, [r3, #0]
						setTimer6(50);
 80005e2:	2032      	movs	r0, #50	@ 0x32
 80005e4:	f000 fe54 	bl	8001290 <setTimer6>
						buffer_duration_time = duration_time_of_AUTO_YELLOW;
 80005e8:	4b7b      	ldr	r3, [pc, #492]	@ (80007d8 <fsm_manual_run+0x300>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a78      	ldr	r2, [pc, #480]	@ (80007d0 <fsm_manual_run+0x2f8>)
 80005ee:	6013      	str	r3, [r2, #0]
						mode = MAN_YELLOW_MODE;
 80005f0:	4b70      	ldr	r3, [pc, #448]	@ (80007b4 <fsm_manual_run+0x2dc>)
 80005f2:	2203      	movs	r2, #3
 80005f4:	601a      	str	r2, [r3, #0]
					}
					if(is_button_pressed(1) == 1){
 80005f6:	2001      	movs	r0, #1
 80005f8:	f7ff fdf2 	bl	80001e0 <is_button_pressed>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d110      	bne.n	8000624 <fsm_manual_run+0x14c>
						buffer_duration_time = (buffer_duration_time + 100) % 10000;
 8000602:	4b73      	ldr	r3, [pc, #460]	@ (80007d0 <fsm_manual_run+0x2f8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800060a:	4b74      	ldr	r3, [pc, #464]	@ (80007dc <fsm_manual_run+0x304>)
 800060c:	fb83 1302 	smull	r1, r3, r3, r2
 8000610:	1319      	asrs	r1, r3, #12
 8000612:	17d3      	asrs	r3, r2, #31
 8000614:	1acb      	subs	r3, r1, r3
 8000616:	f242 7110 	movw	r1, #10000	@ 0x2710
 800061a:	fb01 f303 	mul.w	r3, r1, r3
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	4a6b      	ldr	r2, [pc, #428]	@ (80007d0 <fsm_manual_run+0x2f8>)
 8000622:	6013      	str	r3, [r2, #0]

					}
					if(is_button_pressed(2) == 1){
 8000624:	2002      	movs	r0, #2
 8000626:	f7ff fddb 	bl	80001e0 <is_button_pressed>
 800062a:	4603      	mov	r3, r0
 800062c:	2b01      	cmp	r3, #1
 800062e:	f040 80d9 	bne.w	80007e4 <fsm_manual_run+0x30c>
						duration_time_of_AUTO_RED = buffer_duration_time;
 8000632:	4b67      	ldr	r3, [pc, #412]	@ (80007d0 <fsm_manual_run+0x2f8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a65      	ldr	r2, [pc, #404]	@ (80007cc <fsm_manual_run+0x2f4>)
 8000638:	6013      	str	r3, [r2, #0]
					}

			break;
 800063a:	e0d3      	b.n	80007e4 <fsm_manual_run+0x30c>
		case MAN_GREEN_MODE:
					update_2_led_7_seg_buffer_left(mode);
 800063c:	4b5d      	ldr	r3, [pc, #372]	@ (80007b4 <fsm_manual_run+0x2dc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fb1f 	bl	8000c84 <update_2_led_7_seg_buffer_left>
					update_2_led_7_seg_buffer_right(buffer_duration_time/100);
 8000646:	4b62      	ldr	r3, [pc, #392]	@ (80007d0 <fsm_manual_run+0x2f8>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a5e      	ldr	r2, [pc, #376]	@ (80007c4 <fsm_manual_run+0x2ec>)
 800064c:	fb82 1203 	smull	r1, r2, r2, r3
 8000650:	1152      	asrs	r2, r2, #5
 8000652:	17db      	asrs	r3, r3, #31
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fb38 	bl	8000ccc <update_2_led_7_seg_buffer_right>
					if(timer6_flag == 1){
 800065c:	4b5d      	ldr	r3, [pc, #372]	@ (80007d4 <fsm_manual_run+0x2fc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d106      	bne.n	8000672 <fsm_manual_run+0x19a>
						blinkind_led_traffic_x();
 8000664:	f000 fc30 	bl	8000ec8 <blinkind_led_traffic_x>
						blinkind_led_traffic_y();
 8000668:	f000 fc70 	bl	8000f4c <blinkind_led_traffic_y>
						setTimer6(50);
 800066c:	2032      	movs	r0, #50	@ 0x32
 800066e:	f000 fe0f 	bl	8001290 <setTimer6>
					}
					if(is_button_pressed(0) == 1){
 8000672:	2000      	movs	r0, #0
 8000674:	f7ff fdb4 	bl	80001e0 <is_button_pressed>
 8000678:	4603      	mov	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	d10d      	bne.n	800069a <fsm_manual_run+0x1c2>
						clearTimer6();
 800067e:	f000 fe41 	bl	8001304 <clearTimer6>
						status = INIT;
 8000682:	4b4d      	ldr	r3, [pc, #308]	@ (80007b8 <fsm_manual_run+0x2e0>)
 8000684:	220e      	movs	r2, #14
 8000686:	601a      	str	r2, [r3, #0]
						status1 = INIT1;
 8000688:	4b4c      	ldr	r3, [pc, #304]	@ (80007bc <fsm_manual_run+0x2e4>)
 800068a:	220f      	movs	r2, #15
 800068c:	601a      	str	r2, [r3, #0]
						setTimer6(50);
 800068e:	2032      	movs	r0, #50	@ 0x32
 8000690:	f000 fdfe 	bl	8001290 <setTimer6>

						mode = NORMAL_MODE;
 8000694:	4b47      	ldr	r3, [pc, #284]	@ (80007b4 <fsm_manual_run+0x2dc>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]
					}
					if(is_button_pressed(1) == 1){
 800069a:	2001      	movs	r0, #1
 800069c:	f7ff fda0 	bl	80001e0 <is_button_pressed>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d110      	bne.n	80006c8 <fsm_manual_run+0x1f0>
						buffer_duration_time = (buffer_duration_time + 100) % 10000;
 80006a6:	4b4a      	ldr	r3, [pc, #296]	@ (80007d0 <fsm_manual_run+0x2f8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80006ae:	4b4b      	ldr	r3, [pc, #300]	@ (80007dc <fsm_manual_run+0x304>)
 80006b0:	fb83 1302 	smull	r1, r3, r3, r2
 80006b4:	1319      	asrs	r1, r3, #12
 80006b6:	17d3      	asrs	r3, r2, #31
 80006b8:	1acb      	subs	r3, r1, r3
 80006ba:	f242 7110 	movw	r1, #10000	@ 0x2710
 80006be:	fb01 f303 	mul.w	r3, r1, r3
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	4a42      	ldr	r2, [pc, #264]	@ (80007d0 <fsm_manual_run+0x2f8>)
 80006c6:	6013      	str	r3, [r2, #0]

					}
					if(is_button_pressed(2) == 1){
 80006c8:	2002      	movs	r0, #2
 80006ca:	f7ff fd89 	bl	80001e0 <is_button_pressed>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	f040 8089 	bne.w	80007e8 <fsm_manual_run+0x310>
						duration_time_of_AUTO_GREEN = buffer_duration_time;
 80006d6:	4b3e      	ldr	r3, [pc, #248]	@ (80007d0 <fsm_manual_run+0x2f8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a41      	ldr	r2, [pc, #260]	@ (80007e0 <fsm_manual_run+0x308>)
 80006dc:	6013      	str	r3, [r2, #0]
						if(duration_time_of_AUTO_RED != duration_time_of_AUTO_GREEN + duration_time_of_AUTO_YELLOW){
 80006de:	4b40      	ldr	r3, [pc, #256]	@ (80007e0 <fsm_manual_run+0x308>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	4b3d      	ldr	r3, [pc, #244]	@ (80007d8 <fsm_manual_run+0x300>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	441a      	add	r2, r3
 80006e8:	4b38      	ldr	r3, [pc, #224]	@ (80007cc <fsm_manual_run+0x2f4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d07b      	beq.n	80007e8 <fsm_manual_run+0x310>
							duration_time_of_AUTO_RED = duration_time_of_AUTO_GREEN + duration_time_of_AUTO_YELLOW;
 80006f0:	4b3b      	ldr	r3, [pc, #236]	@ (80007e0 <fsm_manual_run+0x308>)
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b38      	ldr	r3, [pc, #224]	@ (80007d8 <fsm_manual_run+0x300>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4413      	add	r3, r2
 80006fa:	4a34      	ldr	r2, [pc, #208]	@ (80007cc <fsm_manual_run+0x2f4>)
 80006fc:	6013      	str	r3, [r2, #0]
						}
					}

			break;
 80006fe:	e073      	b.n	80007e8 <fsm_manual_run+0x310>
		case MAN_YELLOW_MODE:
			update_2_led_7_seg_buffer_left(mode);
 8000700:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <fsm_manual_run+0x2dc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f000 fabd 	bl	8000c84 <update_2_led_7_seg_buffer_left>
			update_2_led_7_seg_buffer_right(buffer_duration_time/100);
 800070a:	4b31      	ldr	r3, [pc, #196]	@ (80007d0 <fsm_manual_run+0x2f8>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a2d      	ldr	r2, [pc, #180]	@ (80007c4 <fsm_manual_run+0x2ec>)
 8000710:	fb82 1203 	smull	r1, r2, r2, r3
 8000714:	1152      	asrs	r2, r2, #5
 8000716:	17db      	asrs	r3, r3, #31
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fad6 	bl	8000ccc <update_2_led_7_seg_buffer_right>
			if(timer6_flag == 1){
 8000720:	4b2c      	ldr	r3, [pc, #176]	@ (80007d4 <fsm_manual_run+0x2fc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d106      	bne.n	8000736 <fsm_manual_run+0x25e>
				blinkind_led_traffic_x();
 8000728:	f000 fbce 	bl	8000ec8 <blinkind_led_traffic_x>
				blinkind_led_traffic_y();
 800072c:	f000 fc0e 	bl	8000f4c <blinkind_led_traffic_y>
				setTimer6(50);
 8000730:	2032      	movs	r0, #50	@ 0x32
 8000732:	f000 fdad 	bl	8001290 <setTimer6>
			}
			if(is_button_pressed(0) == 1){
 8000736:	2000      	movs	r0, #0
 8000738:	f7ff fd52 	bl	80001e0 <is_button_pressed>
 800073c:	4603      	mov	r3, r0
 800073e:	2b01      	cmp	r3, #1
 8000740:	d111      	bne.n	8000766 <fsm_manual_run+0x28e>
				clearTimer6();
 8000742:	f000 fddf 	bl	8001304 <clearTimer6>
				status = AUTO_GREEN;
 8000746:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <fsm_manual_run+0x2e0>)
 8000748:	220c      	movs	r2, #12
 800074a:	601a      	str	r2, [r3, #0]
				status1 = AUTO_GREEN;
 800074c:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <fsm_manual_run+0x2e4>)
 800074e:	220c      	movs	r2, #12
 8000750:	601a      	str	r2, [r3, #0]
				setTimer6(50);
 8000752:	2032      	movs	r0, #50	@ 0x32
 8000754:	f000 fd9c 	bl	8001290 <setTimer6>
				buffer_duration_time = duration_time_of_AUTO_GREEN;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <fsm_manual_run+0x308>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a1c      	ldr	r2, [pc, #112]	@ (80007d0 <fsm_manual_run+0x2f8>)
 800075e:	6013      	str	r3, [r2, #0]
				mode = MAN_GREEN_MODE;
 8000760:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <fsm_manual_run+0x2dc>)
 8000762:	2204      	movs	r2, #4
 8000764:	601a      	str	r2, [r3, #0]
			}
			if(is_button_pressed(1) == 1){
 8000766:	2001      	movs	r0, #1
 8000768:	f7ff fd3a 	bl	80001e0 <is_button_pressed>
 800076c:	4603      	mov	r3, r0
 800076e:	2b01      	cmp	r3, #1
 8000770:	d110      	bne.n	8000794 <fsm_manual_run+0x2bc>
				buffer_duration_time = (buffer_duration_time + 100) % 10000;
 8000772:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <fsm_manual_run+0x2f8>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 800077a:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <fsm_manual_run+0x304>)
 800077c:	fb83 1302 	smull	r1, r3, r3, r2
 8000780:	1319      	asrs	r1, r3, #12
 8000782:	17d3      	asrs	r3, r2, #31
 8000784:	1acb      	subs	r3, r1, r3
 8000786:	f242 7110 	movw	r1, #10000	@ 0x2710
 800078a:	fb01 f303 	mul.w	r3, r1, r3
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	4a0f      	ldr	r2, [pc, #60]	@ (80007d0 <fsm_manual_run+0x2f8>)
 8000792:	6013      	str	r3, [r2, #0]

			}
			if(is_button_pressed(2) == 1){
 8000794:	2002      	movs	r0, #2
 8000796:	f7ff fd23 	bl	80001e0 <is_button_pressed>
 800079a:	4603      	mov	r3, r0
 800079c:	2b01      	cmp	r3, #1
 800079e:	d125      	bne.n	80007ec <fsm_manual_run+0x314>
				duration_time_of_AUTO_YELLOW = buffer_duration_time;
 80007a0:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <fsm_manual_run+0x2f8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a0c      	ldr	r2, [pc, #48]	@ (80007d8 <fsm_manual_run+0x300>)
 80007a6:	6013      	str	r3, [r2, #0]
			}

			break;
 80007a8:	e020      	b.n	80007ec <fsm_manual_run+0x314>
		default:
			break;
 80007aa:	bf00      	nop
 80007ac:	e01f      	b.n	80007ee <fsm_manual_run+0x316>
			break;
 80007ae:	bf00      	nop
 80007b0:	e01d      	b.n	80007ee <fsm_manual_run+0x316>
 80007b2:	bf00      	nop
 80007b4:	2000007c 	.word	0x2000007c
 80007b8:	20000074 	.word	0x20000074
 80007bc:	20000078 	.word	0x20000078
 80007c0:	200000e0 	.word	0x200000e0
 80007c4:	51eb851f 	.word	0x51eb851f
 80007c8:	200000e4 	.word	0x200000e4
 80007cc:	20000014 	.word	0x20000014
 80007d0:	20000020 	.word	0x20000020
 80007d4:	200000f8 	.word	0x200000f8
 80007d8:	20000018 	.word	0x20000018
 80007dc:	68db8bad 	.word	0x68db8bad
 80007e0:	2000001c 	.word	0x2000001c
			break;
 80007e4:	bf00      	nop
 80007e6:	e002      	b.n	80007ee <fsm_manual_run+0x316>
			break;
 80007e8:	bf00      	nop
 80007ea:	e000      	b.n	80007ee <fsm_manual_run+0x316>
			break;
 80007ec:	bf00      	nop
	}
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop

080007f4 <display7SEG>:
//int count = 0;



//functions
void display7SEG(int num) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
      switch(num) {
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b09      	cmp	r3, #9
 8000800:	f200 8180 	bhi.w	8000b04 <display7SEG+0x310>
 8000804:	a201      	add	r2, pc, #4	@ (adr r2, 800080c <display7SEG+0x18>)
 8000806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080a:	bf00      	nop
 800080c:	08000835 	.word	0x08000835
 8000810:	0800087d 	.word	0x0800087d
 8000814:	080008c5 	.word	0x080008c5
 8000818:	0800090d 	.word	0x0800090d
 800081c:	08000955 	.word	0x08000955
 8000820:	0800099d 	.word	0x0800099d
 8000824:	080009e5 	.word	0x080009e5
 8000828:	08000a2d 	.word	0x08000a2d
 800082c:	08000a75 	.word	0x08000a75
 8000830:	08000abd 	.word	0x08000abd
          case 0:
              //printf("Segments: a, b, c, d, e, f\n");
        	  HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2101      	movs	r1, #1
 8000838:	48c6      	ldr	r0, [pc, #792]	@ (8000b54 <display7SEG+0x360>)
 800083a:	f001 f984 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2102      	movs	r1, #2
 8000842:	48c4      	ldr	r0, [pc, #784]	@ (8000b54 <display7SEG+0x360>)
 8000844:	f001 f97f 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2104      	movs	r1, #4
 800084c:	48c1      	ldr	r0, [pc, #772]	@ (8000b54 <display7SEG+0x360>)
 800084e:	f001 f97a 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2108      	movs	r1, #8
 8000856:	48bf      	ldr	r0, [pc, #764]	@ (8000b54 <display7SEG+0x360>)
 8000858:	f001 f975 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2110      	movs	r1, #16
 8000860:	48bc      	ldr	r0, [pc, #752]	@ (8000b54 <display7SEG+0x360>)
 8000862:	f001 f970 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2120      	movs	r1, #32
 800086a:	48ba      	ldr	r0, [pc, #744]	@ (8000b54 <display7SEG+0x360>)
 800086c:	f001 f96b 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2140      	movs	r1, #64	@ 0x40
 8000874:	48b7      	ldr	r0, [pc, #732]	@ (8000b54 <display7SEG+0x360>)
 8000876:	f001 f966 	bl	8001b46 <HAL_GPIO_WritePin>
              break;
 800087a:	e167      	b.n	8000b4c <display7SEG+0x358>
          case 1:
//              printf("Segments: b, c\n");
        	  HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2101      	movs	r1, #1
 8000880:	48b4      	ldr	r0, [pc, #720]	@ (8000b54 <display7SEG+0x360>)
 8000882:	f001 f960 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2102      	movs	r1, #2
 800088a:	48b2      	ldr	r0, [pc, #712]	@ (8000b54 <display7SEG+0x360>)
 800088c:	f001 f95b 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2104      	movs	r1, #4
 8000894:	48af      	ldr	r0, [pc, #700]	@ (8000b54 <display7SEG+0x360>)
 8000896:	f001 f956 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_SET);
 800089a:	2201      	movs	r2, #1
 800089c:	2108      	movs	r1, #8
 800089e:	48ad      	ldr	r0, [pc, #692]	@ (8000b54 <display7SEG+0x360>)
 80008a0:	f001 f951 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	2110      	movs	r1, #16
 80008a8:	48aa      	ldr	r0, [pc, #680]	@ (8000b54 <display7SEG+0x360>)
 80008aa:	f001 f94c 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2120      	movs	r1, #32
 80008b2:	48a8      	ldr	r0, [pc, #672]	@ (8000b54 <display7SEG+0x360>)
 80008b4:	f001 f947 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2140      	movs	r1, #64	@ 0x40
 80008bc:	48a5      	ldr	r0, [pc, #660]	@ (8000b54 <display7SEG+0x360>)
 80008be:	f001 f942 	bl	8001b46 <HAL_GPIO_WritePin>
              break;
 80008c2:	e143      	b.n	8000b4c <display7SEG+0x358>
          case 2:
//              printf("Segments: a, b, d, e, g\n");
        	  HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2101      	movs	r1, #1
 80008c8:	48a2      	ldr	r0, [pc, #648]	@ (8000b54 <display7SEG+0x360>)
 80008ca:	f001 f93c 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2102      	movs	r1, #2
 80008d2:	48a0      	ldr	r0, [pc, #640]	@ (8000b54 <display7SEG+0x360>)
 80008d4:	f001 f937 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2104      	movs	r1, #4
 80008dc:	489d      	ldr	r0, [pc, #628]	@ (8000b54 <display7SEG+0x360>)
 80008de:	f001 f932 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2108      	movs	r1, #8
 80008e6:	489b      	ldr	r0, [pc, #620]	@ (8000b54 <display7SEG+0x360>)
 80008e8:	f001 f92d 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2110      	movs	r1, #16
 80008f0:	4898      	ldr	r0, [pc, #608]	@ (8000b54 <display7SEG+0x360>)
 80008f2:	f001 f928 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2120      	movs	r1, #32
 80008fa:	4896      	ldr	r0, [pc, #600]	@ (8000b54 <display7SEG+0x360>)
 80008fc:	f001 f923 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2140      	movs	r1, #64	@ 0x40
 8000904:	4893      	ldr	r0, [pc, #588]	@ (8000b54 <display7SEG+0x360>)
 8000906:	f001 f91e 	bl	8001b46 <HAL_GPIO_WritePin>
              break;
 800090a:	e11f      	b.n	8000b4c <display7SEG+0x358>
          case 3:
//              printf("Segments: a, b, c, d, g\n");
        	  HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2101      	movs	r1, #1
 8000910:	4890      	ldr	r0, [pc, #576]	@ (8000b54 <display7SEG+0x360>)
 8000912:	f001 f918 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2102      	movs	r1, #2
 800091a:	488e      	ldr	r0, [pc, #568]	@ (8000b54 <display7SEG+0x360>)
 800091c:	f001 f913 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2104      	movs	r1, #4
 8000924:	488b      	ldr	r0, [pc, #556]	@ (8000b54 <display7SEG+0x360>)
 8000926:	f001 f90e 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2108      	movs	r1, #8
 800092e:	4889      	ldr	r0, [pc, #548]	@ (8000b54 <display7SEG+0x360>)
 8000930:	f001 f909 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	2110      	movs	r1, #16
 8000938:	4886      	ldr	r0, [pc, #536]	@ (8000b54 <display7SEG+0x360>)
 800093a:	f001 f904 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_SET);
 800093e:	2201      	movs	r2, #1
 8000940:	2120      	movs	r1, #32
 8000942:	4884      	ldr	r0, [pc, #528]	@ (8000b54 <display7SEG+0x360>)
 8000944:	f001 f8ff 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2140      	movs	r1, #64	@ 0x40
 800094c:	4881      	ldr	r0, [pc, #516]	@ (8000b54 <display7SEG+0x360>)
 800094e:	f001 f8fa 	bl	8001b46 <HAL_GPIO_WritePin>
              break;
 8000952:	e0fb      	b.n	8000b4c <display7SEG+0x358>
          case 4:
//              printf("Segments: b, c, f, g\n");
        	  HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2101      	movs	r1, #1
 8000958:	487e      	ldr	r0, [pc, #504]	@ (8000b54 <display7SEG+0x360>)
 800095a:	f001 f8f4 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2102      	movs	r1, #2
 8000962:	487c      	ldr	r0, [pc, #496]	@ (8000b54 <display7SEG+0x360>)
 8000964:	f001 f8ef 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2104      	movs	r1, #4
 800096c:	4879      	ldr	r0, [pc, #484]	@ (8000b54 <display7SEG+0x360>)
 800096e:	f001 f8ea 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	2108      	movs	r1, #8
 8000976:	4877      	ldr	r0, [pc, #476]	@ (8000b54 <display7SEG+0x360>)
 8000978:	f001 f8e5 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	2110      	movs	r1, #16
 8000980:	4874      	ldr	r0, [pc, #464]	@ (8000b54 <display7SEG+0x360>)
 8000982:	f001 f8e0 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2120      	movs	r1, #32
 800098a:	4872      	ldr	r0, [pc, #456]	@ (8000b54 <display7SEG+0x360>)
 800098c:	f001 f8db 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2140      	movs	r1, #64	@ 0x40
 8000994:	486f      	ldr	r0, [pc, #444]	@ (8000b54 <display7SEG+0x360>)
 8000996:	f001 f8d6 	bl	8001b46 <HAL_GPIO_WritePin>
              break;
 800099a:	e0d7      	b.n	8000b4c <display7SEG+0x358>
          case 5:
//              printf("Segments: a, c, d, f, g\n");
        	  HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2101      	movs	r1, #1
 80009a0:	486c      	ldr	r0, [pc, #432]	@ (8000b54 <display7SEG+0x360>)
 80009a2:	f001 f8d0 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2102      	movs	r1, #2
 80009aa:	486a      	ldr	r0, [pc, #424]	@ (8000b54 <display7SEG+0x360>)
 80009ac:	f001 f8cb 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2104      	movs	r1, #4
 80009b4:	4867      	ldr	r0, [pc, #412]	@ (8000b54 <display7SEG+0x360>)
 80009b6:	f001 f8c6 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2108      	movs	r1, #8
 80009be:	4865      	ldr	r0, [pc, #404]	@ (8000b54 <display7SEG+0x360>)
 80009c0:	f001 f8c1 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2110      	movs	r1, #16
 80009c8:	4862      	ldr	r0, [pc, #392]	@ (8000b54 <display7SEG+0x360>)
 80009ca:	f001 f8bc 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2120      	movs	r1, #32
 80009d2:	4860      	ldr	r0, [pc, #384]	@ (8000b54 <display7SEG+0x360>)
 80009d4:	f001 f8b7 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2140      	movs	r1, #64	@ 0x40
 80009dc:	485d      	ldr	r0, [pc, #372]	@ (8000b54 <display7SEG+0x360>)
 80009de:	f001 f8b2 	bl	8001b46 <HAL_GPIO_WritePin>
              break;
 80009e2:	e0b3      	b.n	8000b4c <display7SEG+0x358>
          case 6:
//              printf("Segments: a, c, d, e, f, g\n");
        	  HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2101      	movs	r1, #1
 80009e8:	485a      	ldr	r0, [pc, #360]	@ (8000b54 <display7SEG+0x360>)
 80009ea:	f001 f8ac 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2102      	movs	r1, #2
 80009f2:	4858      	ldr	r0, [pc, #352]	@ (8000b54 <display7SEG+0x360>)
 80009f4:	f001 f8a7 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2104      	movs	r1, #4
 80009fc:	4855      	ldr	r0, [pc, #340]	@ (8000b54 <display7SEG+0x360>)
 80009fe:	f001 f8a2 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2108      	movs	r1, #8
 8000a06:	4853      	ldr	r0, [pc, #332]	@ (8000b54 <display7SEG+0x360>)
 8000a08:	f001 f89d 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2110      	movs	r1, #16
 8000a10:	4850      	ldr	r0, [pc, #320]	@ (8000b54 <display7SEG+0x360>)
 8000a12:	f001 f898 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2120      	movs	r1, #32
 8000a1a:	484e      	ldr	r0, [pc, #312]	@ (8000b54 <display7SEG+0x360>)
 8000a1c:	f001 f893 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2140      	movs	r1, #64	@ 0x40
 8000a24:	484b      	ldr	r0, [pc, #300]	@ (8000b54 <display7SEG+0x360>)
 8000a26:	f001 f88e 	bl	8001b46 <HAL_GPIO_WritePin>
              break;
 8000a2a:	e08f      	b.n	8000b4c <display7SEG+0x358>
          case 7:
//              printf("Segments: a, b, c\n");
        	  HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4848      	ldr	r0, [pc, #288]	@ (8000b54 <display7SEG+0x360>)
 8000a32:	f001 f888 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2102      	movs	r1, #2
 8000a3a:	4846      	ldr	r0, [pc, #280]	@ (8000b54 <display7SEG+0x360>)
 8000a3c:	f001 f883 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2104      	movs	r1, #4
 8000a44:	4843      	ldr	r0, [pc, #268]	@ (8000b54 <display7SEG+0x360>)
 8000a46:	f001 f87e 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2108      	movs	r1, #8
 8000a4e:	4841      	ldr	r0, [pc, #260]	@ (8000b54 <display7SEG+0x360>)
 8000a50:	f001 f879 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2110      	movs	r1, #16
 8000a58:	483e      	ldr	r0, [pc, #248]	@ (8000b54 <display7SEG+0x360>)
 8000a5a:	f001 f874 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2120      	movs	r1, #32
 8000a62:	483c      	ldr	r0, [pc, #240]	@ (8000b54 <display7SEG+0x360>)
 8000a64:	f001 f86f 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2140      	movs	r1, #64	@ 0x40
 8000a6c:	4839      	ldr	r0, [pc, #228]	@ (8000b54 <display7SEG+0x360>)
 8000a6e:	f001 f86a 	bl	8001b46 <HAL_GPIO_WritePin>
              break;
 8000a72:	e06b      	b.n	8000b4c <display7SEG+0x358>
          case 8:
//              printf("Segments: a, b, c, d, e, f, g\n");
        	  HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2101      	movs	r1, #1
 8000a78:	4836      	ldr	r0, [pc, #216]	@ (8000b54 <display7SEG+0x360>)
 8000a7a:	f001 f864 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2102      	movs	r1, #2
 8000a82:	4834      	ldr	r0, [pc, #208]	@ (8000b54 <display7SEG+0x360>)
 8000a84:	f001 f85f 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	4831      	ldr	r0, [pc, #196]	@ (8000b54 <display7SEG+0x360>)
 8000a8e:	f001 f85a 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2108      	movs	r1, #8
 8000a96:	482f      	ldr	r0, [pc, #188]	@ (8000b54 <display7SEG+0x360>)
 8000a98:	f001 f855 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2110      	movs	r1, #16
 8000aa0:	482c      	ldr	r0, [pc, #176]	@ (8000b54 <display7SEG+0x360>)
 8000aa2:	f001 f850 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2120      	movs	r1, #32
 8000aaa:	482a      	ldr	r0, [pc, #168]	@ (8000b54 <display7SEG+0x360>)
 8000aac:	f001 f84b 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2140      	movs	r1, #64	@ 0x40
 8000ab4:	4827      	ldr	r0, [pc, #156]	@ (8000b54 <display7SEG+0x360>)
 8000ab6:	f001 f846 	bl	8001b46 <HAL_GPIO_WritePin>
              break;
 8000aba:	e047      	b.n	8000b4c <display7SEG+0x358>
          case 9:
//              printf("Segments: a, b, c, d, f, g\n");
        	  HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2101      	movs	r1, #1
 8000ac0:	4824      	ldr	r0, [pc, #144]	@ (8000b54 <display7SEG+0x360>)
 8000ac2:	f001 f840 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4822      	ldr	r0, [pc, #136]	@ (8000b54 <display7SEG+0x360>)
 8000acc:	f001 f83b 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	481f      	ldr	r0, [pc, #124]	@ (8000b54 <display7SEG+0x360>)
 8000ad6:	f001 f836 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2108      	movs	r1, #8
 8000ade:	481d      	ldr	r0, [pc, #116]	@ (8000b54 <display7SEG+0x360>)
 8000ae0:	f001 f831 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	481a      	ldr	r0, [pc, #104]	@ (8000b54 <display7SEG+0x360>)
 8000aea:	f001 f82c 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2120      	movs	r1, #32
 8000af2:	4818      	ldr	r0, [pc, #96]	@ (8000b54 <display7SEG+0x360>)
 8000af4:	f001 f827 	bl	8001b46 <HAL_GPIO_WritePin>
        	  HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2140      	movs	r1, #64	@ 0x40
 8000afc:	4815      	ldr	r0, [pc, #84]	@ (8000b54 <display7SEG+0x360>)
 8000afe:	f001 f822 	bl	8001b46 <HAL_GPIO_WritePin>
              break;
 8000b02:	e023      	b.n	8000b4c <display7SEG+0x358>
          default:
        	    HAL_GPIO_WritePin(GPIOB,SEG0_Pin,GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2101      	movs	r1, #1
 8000b08:	4812      	ldr	r0, [pc, #72]	@ (8000b54 <display7SEG+0x360>)
 8000b0a:	f001 f81c 	bl	8001b46 <HAL_GPIO_WritePin>
        	    HAL_GPIO_WritePin(GPIOB,SEG1_Pin,GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2102      	movs	r1, #2
 8000b12:	4810      	ldr	r0, [pc, #64]	@ (8000b54 <display7SEG+0x360>)
 8000b14:	f001 f817 	bl	8001b46 <HAL_GPIO_WritePin>
        	    HAL_GPIO_WritePin(GPIOB,SEG2_Pin,GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <display7SEG+0x360>)
 8000b1e:	f001 f812 	bl	8001b46 <HAL_GPIO_WritePin>
        	    HAL_GPIO_WritePin(GPIOB,SEG3_Pin,GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2108      	movs	r1, #8
 8000b26:	480b      	ldr	r0, [pc, #44]	@ (8000b54 <display7SEG+0x360>)
 8000b28:	f001 f80d 	bl	8001b46 <HAL_GPIO_WritePin>
        	    HAL_GPIO_WritePin(GPIOB,SEG4_Pin,GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2110      	movs	r1, #16
 8000b30:	4808      	ldr	r0, [pc, #32]	@ (8000b54 <display7SEG+0x360>)
 8000b32:	f001 f808 	bl	8001b46 <HAL_GPIO_WritePin>
        	    HAL_GPIO_WritePin(GPIOB,SEG5_Pin,GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2120      	movs	r1, #32
 8000b3a:	4806      	ldr	r0, [pc, #24]	@ (8000b54 <display7SEG+0x360>)
 8000b3c:	f001 f803 	bl	8001b46 <HAL_GPIO_WritePin>
        	    HAL_GPIO_WritePin(GPIOB,SEG6_Pin,GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2140      	movs	r1, #64	@ 0x40
 8000b44:	4803      	ldr	r0, [pc, #12]	@ (8000b54 <display7SEG+0x360>)
 8000b46:	f000 fffe 	bl	8001b46 <HAL_GPIO_WritePin>
        	  break;
 8000b4a:	bf00      	nop
      }
  }
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40010c00 	.word	0x40010c00

08000b58 <onoff_gates_led>:




void onoff_gates_led(int index){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	switch(index){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	d86e      	bhi.n	8000c44 <onoff_gates_led+0xec>
 8000b66:	a201      	add	r2, pc, #4	@ (adr r2, 8000b6c <onoff_gates_led+0x14>)
 8000b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6c:	08000b7d 	.word	0x08000b7d
 8000b70:	08000baf 	.word	0x08000baf
 8000b74:	08000be1 	.word	0x08000be1
 8000b78:	08000c13 	.word	0x08000c13
	case 0:
		HAL_GPIO_WritePin( GPIOA, EN0_Pin, RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b82:	483f      	ldr	r0, [pc, #252]	@ (8000c80 <onoff_gates_led+0x128>)
 8000b84:	f000 ffdf 	bl	8001b46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOA, EN1_Pin, SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b8e:	483c      	ldr	r0, [pc, #240]	@ (8000c80 <onoff_gates_led+0x128>)
 8000b90:	f000 ffd9 	bl	8001b46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOA, EN2_Pin, SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b9a:	4839      	ldr	r0, [pc, #228]	@ (8000c80 <onoff_gates_led+0x128>)
 8000b9c:	f000 ffd3 	bl	8001b46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOA, EN3_Pin, SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ba6:	4836      	ldr	r0, [pc, #216]	@ (8000c80 <onoff_gates_led+0x128>)
 8000ba8:	f000 ffcd 	bl	8001b46 <HAL_GPIO_WritePin>
		break;
 8000bac:	e063      	b.n	8000c76 <onoff_gates_led+0x11e>
	case 1:
		HAL_GPIO_WritePin( GPIOA, EN0_Pin, SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb4:	4832      	ldr	r0, [pc, #200]	@ (8000c80 <onoff_gates_led+0x128>)
 8000bb6:	f000 ffc6 	bl	8001b46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOA, EN1_Pin, RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc0:	482f      	ldr	r0, [pc, #188]	@ (8000c80 <onoff_gates_led+0x128>)
 8000bc2:	f000 ffc0 	bl	8001b46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOA, EN2_Pin, SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bcc:	482c      	ldr	r0, [pc, #176]	@ (8000c80 <onoff_gates_led+0x128>)
 8000bce:	f000 ffba 	bl	8001b46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOA, EN3_Pin, SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bd8:	4829      	ldr	r0, [pc, #164]	@ (8000c80 <onoff_gates_led+0x128>)
 8000bda:	f000 ffb4 	bl	8001b46 <HAL_GPIO_WritePin>
		break;
 8000bde:	e04a      	b.n	8000c76 <onoff_gates_led+0x11e>
	case 2:
		HAL_GPIO_WritePin( GPIOA, EN0_Pin, SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000be6:	4826      	ldr	r0, [pc, #152]	@ (8000c80 <onoff_gates_led+0x128>)
 8000be8:	f000 ffad 	bl	8001b46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOA, EN1_Pin, SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf2:	4823      	ldr	r0, [pc, #140]	@ (8000c80 <onoff_gates_led+0x128>)
 8000bf4:	f000 ffa7 	bl	8001b46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOA, EN2_Pin, RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bfe:	4820      	ldr	r0, [pc, #128]	@ (8000c80 <onoff_gates_led+0x128>)
 8000c00:	f000 ffa1 	bl	8001b46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOA, EN3_Pin, SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c0a:	481d      	ldr	r0, [pc, #116]	@ (8000c80 <onoff_gates_led+0x128>)
 8000c0c:	f000 ff9b 	bl	8001b46 <HAL_GPIO_WritePin>
		break;
 8000c10:	e031      	b.n	8000c76 <onoff_gates_led+0x11e>
	case 3:
		HAL_GPIO_WritePin( GPIOA, EN0_Pin, SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c18:	4819      	ldr	r0, [pc, #100]	@ (8000c80 <onoff_gates_led+0x128>)
 8000c1a:	f000 ff94 	bl	8001b46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOA, EN1_Pin, SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c24:	4816      	ldr	r0, [pc, #88]	@ (8000c80 <onoff_gates_led+0x128>)
 8000c26:	f000 ff8e 	bl	8001b46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOA, EN2_Pin, SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c30:	4813      	ldr	r0, [pc, #76]	@ (8000c80 <onoff_gates_led+0x128>)
 8000c32:	f000 ff88 	bl	8001b46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOA, EN3_Pin, RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c3c:	4810      	ldr	r0, [pc, #64]	@ (8000c80 <onoff_gates_led+0x128>)
 8000c3e:	f000 ff82 	bl	8001b46 <HAL_GPIO_WritePin>
		break;
 8000c42:	e018      	b.n	8000c76 <onoff_gates_led+0x11e>
	default:
		HAL_GPIO_WritePin( GPIOA, EN0_Pin, SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c4a:	480d      	ldr	r0, [pc, #52]	@ (8000c80 <onoff_gates_led+0x128>)
 8000c4c:	f000 ff7b 	bl	8001b46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOA, EN1_Pin, SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c56:	480a      	ldr	r0, [pc, #40]	@ (8000c80 <onoff_gates_led+0x128>)
 8000c58:	f000 ff75 	bl	8001b46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOA, EN2_Pin, SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c62:	4807      	ldr	r0, [pc, #28]	@ (8000c80 <onoff_gates_led+0x128>)
 8000c64:	f000 ff6f 	bl	8001b46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin( GPIOA, EN3_Pin, SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c6e:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <onoff_gates_led+0x128>)
 8000c70:	f000 ff69 	bl	8001b46 <HAL_GPIO_WritePin>
		break;
 8000c74:	bf00      	nop
	}
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40010800 	.word	0x40010800

08000c84 <update_2_led_7_seg_buffer_left>:
//	setTimer3(100);
//}
//}


void update_2_led_7_seg_buffer_left(int number){
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	led_7_seg_buffer[0] = (number / 10);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc4 <update_2_led_7_seg_buffer_left+0x40>)
 8000c90:	fb82 1203 	smull	r1, r2, r2, r3
 8000c94:	1092      	asrs	r2, r2, #2
 8000c96:	17db      	asrs	r3, r3, #31
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc8 <update_2_led_7_seg_buffer_left+0x44>)
 8000c9c:	6013      	str	r3, [r2, #0]
	led_7_seg_buffer[1] = (number % 10);
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <update_2_led_7_seg_buffer_left+0x40>)
 8000ca2:	fb83 2301 	smull	r2, r3, r3, r1
 8000ca6:	109a      	asrs	r2, r3, #2
 8000ca8:	17cb      	asrs	r3, r1, #31
 8000caa:	1ad2      	subs	r2, r2, r3
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	1aca      	subs	r2, r1, r3
 8000cb6:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <update_2_led_7_seg_buffer_left+0x44>)
 8000cb8:	605a      	str	r2, [r3, #4]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	66666667 	.word	0x66666667
 8000cc8:	20000080 	.word	0x20000080

08000ccc <update_2_led_7_seg_buffer_right>:
void update_2_led_7_seg_buffer_right(int number){
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	led_7_seg_buffer[2] = (number / 10);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <update_2_led_7_seg_buffer_right+0x40>)
 8000cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cdc:	1092      	asrs	r2, r2, #2
 8000cde:	17db      	asrs	r3, r3, #31
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d10 <update_2_led_7_seg_buffer_right+0x44>)
 8000ce4:	6093      	str	r3, [r2, #8]
	led_7_seg_buffer[3] = (number % 10);
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <update_2_led_7_seg_buffer_right+0x40>)
 8000cea:	fb83 2301 	smull	r2, r3, r3, r1
 8000cee:	109a      	asrs	r2, r3, #2
 8000cf0:	17cb      	asrs	r3, r1, #31
 8000cf2:	1ad2      	subs	r2, r2, r3
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	1aca      	subs	r2, r1, r3
 8000cfe:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <update_2_led_7_seg_buffer_right+0x44>)
 8000d00:	60da      	str	r2, [r3, #12]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	66666667 	.word	0x66666667
 8000d10:	20000080 	.word	0x20000080

08000d14 <led_7_seg_run>:
//        setTimer3(25);
//    }
//}


void led_7_seg_run(){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	onoff_gates_led(index_led_7_seg);
 8000d18:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <led_7_seg_run+0x48>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff1b 	bl	8000b58 <onoff_gates_led>
	display7SEG(led_7_seg_buffer[index_led_7_seg]);
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <led_7_seg_run+0x48>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a0e      	ldr	r2, [pc, #56]	@ (8000d60 <led_7_seg_run+0x4c>)
 8000d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fd61 	bl	80007f4 <display7SEG>

	if(timer0_flag == 1){
 8000d32:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <led_7_seg_run+0x50>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d10e      	bne.n	8000d58 <led_7_seg_run+0x44>
		index_led_7_seg = (index_led_7_seg + 1)%4;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <led_7_seg_run+0x48>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	425a      	negs	r2, r3
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	f002 0203 	and.w	r2, r2, #3
 8000d4a:	bf58      	it	pl
 8000d4c:	4253      	negpl	r3, r2
 8000d4e:	4a03      	ldr	r2, [pc, #12]	@ (8000d5c <led_7_seg_run+0x48>)
 8000d50:	6013      	str	r3, [r2, #0]
		setTimer0(25);
 8000d52:	2019      	movs	r0, #25
 8000d54:	f000 fa4e 	bl	80011f4 <setTimer0>
	}

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000090 	.word	0x20000090
 8000d60:	20000080 	.word	0x20000080
 8000d64:	200000ec 	.word	0x200000ec

08000d68 <state_init>:
#include "led_states.h"
#include "global.h"



void state_init(){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LRx_GPIO_Port, LRx_Pin, 1);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2104      	movs	r1, #4
 8000d70:	4807      	ldr	r0, [pc, #28]	@ (8000d90 <state_init+0x28>)
 8000d72:	f000 fee8 	bl	8001b46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LGx_GPIO_Port, LGx_Pin, 1);
 8000d76:	2201      	movs	r2, #1
 8000d78:	2110      	movs	r1, #16
 8000d7a:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <state_init+0x28>)
 8000d7c:	f000 fee3 	bl	8001b46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LYx_GPIO_Port, LYx_Pin, 1);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2108      	movs	r1, #8
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <state_init+0x28>)
 8000d86:	f000 fede 	bl	8001b46 <HAL_GPIO_WritePin>
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40010800 	.word	0x40010800

08000d94 <state_red>:

void state_red(){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LRx_GPIO_Port, LRx_Pin, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	4807      	ldr	r0, [pc, #28]	@ (8000dbc <state_red+0x28>)
 8000d9e:	f000 fed2 	bl	8001b46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LGx_GPIO_Port, LGx_Pin, 1);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2110      	movs	r1, #16
 8000da6:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <state_red+0x28>)
 8000da8:	f000 fecd 	bl	8001b46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LYx_GPIO_Port, LYx_Pin, 1);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2108      	movs	r1, #8
 8000db0:	4802      	ldr	r0, [pc, #8]	@ (8000dbc <state_red+0x28>)
 8000db2:	f000 fec8 	bl	8001b46 <HAL_GPIO_WritePin>
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40010800 	.word	0x40010800

08000dc0 <state_green>:

void state_green(){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LRx_GPIO_Port, LRx_Pin, 1);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	4807      	ldr	r0, [pc, #28]	@ (8000de8 <state_green+0x28>)
 8000dca:	f000 febc 	bl	8001b46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LGx_GPIO_Port, LGx_Pin, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	4805      	ldr	r0, [pc, #20]	@ (8000de8 <state_green+0x28>)
 8000dd4:	f000 feb7 	bl	8001b46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LYx_GPIO_Port, LYx_Pin, 1);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2108      	movs	r1, #8
 8000ddc:	4802      	ldr	r0, [pc, #8]	@ (8000de8 <state_green+0x28>)
 8000dde:	f000 feb2 	bl	8001b46 <HAL_GPIO_WritePin>
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40010800 	.word	0x40010800

08000dec <state_yellow>:

void state_yellow(){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LRx_GPIO_Port, LRx_Pin, 1);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2104      	movs	r1, #4
 8000df4:	4807      	ldr	r0, [pc, #28]	@ (8000e14 <state_yellow+0x28>)
 8000df6:	f000 fea6 	bl	8001b46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LGx_GPIO_Port, LGx_Pin, 1);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2110      	movs	r1, #16
 8000dfe:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <state_yellow+0x28>)
 8000e00:	f000 fea1 	bl	8001b46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LYx_GPIO_Port, LYx_Pin, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2108      	movs	r1, #8
 8000e08:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <state_yellow+0x28>)
 8000e0a:	f000 fe9c 	bl	8001b46 <HAL_GPIO_WritePin>
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40010800 	.word	0x40010800

08000e18 <state_init1>:


void state_init1(){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LRy_GPIO_Port, LRy_Pin, 1);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2120      	movs	r1, #32
 8000e20:	4807      	ldr	r0, [pc, #28]	@ (8000e40 <state_init1+0x28>)
 8000e22:	f000 fe90 	bl	8001b46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LGy_GPIO_Port, LGy_Pin, 1);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2180      	movs	r1, #128	@ 0x80
 8000e2a:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <state_init1+0x28>)
 8000e2c:	f000 fe8b 	bl	8001b46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LYy_GPIO_Port, LYy_Pin, 1);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2140      	movs	r1, #64	@ 0x40
 8000e34:	4802      	ldr	r0, [pc, #8]	@ (8000e40 <state_init1+0x28>)
 8000e36:	f000 fe86 	bl	8001b46 <HAL_GPIO_WritePin>
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40010800 	.word	0x40010800

08000e44 <state_red1>:


void state_red1(){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LRy_GPIO_Port, LRy_Pin, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	4807      	ldr	r0, [pc, #28]	@ (8000e6c <state_red1+0x28>)
 8000e4e:	f000 fe7a 	bl	8001b46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LGy_GPIO_Port, LGy_Pin, 1);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2180      	movs	r1, #128	@ 0x80
 8000e56:	4805      	ldr	r0, [pc, #20]	@ (8000e6c <state_red1+0x28>)
 8000e58:	f000 fe75 	bl	8001b46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LYy_GPIO_Port, LYy_Pin, 1);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2140      	movs	r1, #64	@ 0x40
 8000e60:	4802      	ldr	r0, [pc, #8]	@ (8000e6c <state_red1+0x28>)
 8000e62:	f000 fe70 	bl	8001b46 <HAL_GPIO_WritePin>
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40010800 	.word	0x40010800

08000e70 <state_green1>:
void state_green1(){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LRy_GPIO_Port, LRy_Pin, 1);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2120      	movs	r1, #32
 8000e78:	4807      	ldr	r0, [pc, #28]	@ (8000e98 <state_green1+0x28>)
 8000e7a:	f000 fe64 	bl	8001b46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LGy_GPIO_Port, LGy_Pin, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2180      	movs	r1, #128	@ 0x80
 8000e82:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <state_green1+0x28>)
 8000e84:	f000 fe5f 	bl	8001b46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LYy_GPIO_Port, LYy_Pin, 1);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2140      	movs	r1, #64	@ 0x40
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <state_green1+0x28>)
 8000e8e:	f000 fe5a 	bl	8001b46 <HAL_GPIO_WritePin>
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40010800 	.word	0x40010800

08000e9c <state_yellow1>:
void state_yellow1(){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LRy_GPIO_Port, LRy_Pin, 1);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2120      	movs	r1, #32
 8000ea4:	4807      	ldr	r0, [pc, #28]	@ (8000ec4 <state_yellow1+0x28>)
 8000ea6:	f000 fe4e 	bl	8001b46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LGy_GPIO_Port, LGy_Pin, 1);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2180      	movs	r1, #128	@ 0x80
 8000eae:	4805      	ldr	r0, [pc, #20]	@ (8000ec4 <state_yellow1+0x28>)
 8000eb0:	f000 fe49 	bl	8001b46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LYy_GPIO_Port, LYy_Pin, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2140      	movs	r1, #64	@ 0x40
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <state_yellow1+0x28>)
 8000eba:	f000 fe44 	bl	8001b46 <HAL_GPIO_WritePin>
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40010800 	.word	0x40010800

08000ec8 <blinkind_led_traffic_x>:
		default:
			break;
	}
}

void blinkind_led_traffic_x(){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	switch(status){
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <blinkind_led_traffic_x+0x7c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b0d      	cmp	r3, #13
 8000ed2:	d015      	beq.n	8000f00 <blinkind_led_traffic_x+0x38>
 8000ed4:	2b0d      	cmp	r3, #13
 8000ed6:	dc31      	bgt.n	8000f3c <blinkind_led_traffic_x+0x74>
 8000ed8:	2b0b      	cmp	r3, #11
 8000eda:	d002      	beq.n	8000ee2 <blinkind_led_traffic_x+0x1a>
 8000edc:	2b0c      	cmp	r3, #12
 8000ede:	d01e      	beq.n	8000f1e <blinkind_led_traffic_x+0x56>
			HAL_GPIO_WritePin(GPIOA, LRx_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, LYx_Pin, SET);
			HAL_GPIO_TogglePin(GPIOA, LGx_Pin);
			break;
		default:
			break;
 8000ee0:	e02c      	b.n	8000f3c <blinkind_led_traffic_x+0x74>
			HAL_GPIO_TogglePin(GPIOA, LRx_Pin);
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	4818      	ldr	r0, [pc, #96]	@ (8000f48 <blinkind_led_traffic_x+0x80>)
 8000ee6:	f000 fe46 	bl	8001b76 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, LYx_Pin, SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2108      	movs	r1, #8
 8000eee:	4816      	ldr	r0, [pc, #88]	@ (8000f48 <blinkind_led_traffic_x+0x80>)
 8000ef0:	f000 fe29 	bl	8001b46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LGx_Pin, SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	4813      	ldr	r0, [pc, #76]	@ (8000f48 <blinkind_led_traffic_x+0x80>)
 8000efa:	f000 fe24 	bl	8001b46 <HAL_GPIO_WritePin>
			break;
 8000efe:	e01e      	b.n	8000f3e <blinkind_led_traffic_x+0x76>
			HAL_GPIO_WritePin(GPIOA, LRx_Pin, SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2104      	movs	r1, #4
 8000f04:	4810      	ldr	r0, [pc, #64]	@ (8000f48 <blinkind_led_traffic_x+0x80>)
 8000f06:	f000 fe1e 	bl	8001b46 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, LYx_Pin);
 8000f0a:	2108      	movs	r1, #8
 8000f0c:	480e      	ldr	r0, [pc, #56]	@ (8000f48 <blinkind_led_traffic_x+0x80>)
 8000f0e:	f000 fe32 	bl	8001b76 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, LGx_Pin, SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	2110      	movs	r1, #16
 8000f16:	480c      	ldr	r0, [pc, #48]	@ (8000f48 <blinkind_led_traffic_x+0x80>)
 8000f18:	f000 fe15 	bl	8001b46 <HAL_GPIO_WritePin>
			break;
 8000f1c:	e00f      	b.n	8000f3e <blinkind_led_traffic_x+0x76>
			HAL_GPIO_WritePin(GPIOA, LRx_Pin, SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2104      	movs	r1, #4
 8000f22:	4809      	ldr	r0, [pc, #36]	@ (8000f48 <blinkind_led_traffic_x+0x80>)
 8000f24:	f000 fe0f 	bl	8001b46 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LYx_Pin, SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2108      	movs	r1, #8
 8000f2c:	4806      	ldr	r0, [pc, #24]	@ (8000f48 <blinkind_led_traffic_x+0x80>)
 8000f2e:	f000 fe0a 	bl	8001b46 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, LGx_Pin);
 8000f32:	2110      	movs	r1, #16
 8000f34:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <blinkind_led_traffic_x+0x80>)
 8000f36:	f000 fe1e 	bl	8001b76 <HAL_GPIO_TogglePin>
			break;
 8000f3a:	e000      	b.n	8000f3e <blinkind_led_traffic_x+0x76>
			break;
 8000f3c:	bf00      	nop
		}
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000074 	.word	0x20000074
 8000f48:	40010800 	.word	0x40010800

08000f4c <blinkind_led_traffic_y>:

void blinkind_led_traffic_y(){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	switch(status1){
 8000f50:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <blinkind_led_traffic_y+0x7c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b0d      	cmp	r3, #13
 8000f56:	d015      	beq.n	8000f84 <blinkind_led_traffic_y+0x38>
 8000f58:	2b0d      	cmp	r3, #13
 8000f5a:	dc31      	bgt.n	8000fc0 <blinkind_led_traffic_y+0x74>
 8000f5c:	2b0b      	cmp	r3, #11
 8000f5e:	d002      	beq.n	8000f66 <blinkind_led_traffic_y+0x1a>
 8000f60:	2b0c      	cmp	r3, #12
 8000f62:	d01e      	beq.n	8000fa2 <blinkind_led_traffic_y+0x56>
				HAL_GPIO_WritePin(GPIOA, LRy_Pin, SET);
				HAL_GPIO_WritePin(GPIOA, LYy_Pin, SET);
				HAL_GPIO_TogglePin(GPIOA, LGy_Pin);
			break;
			default:
			break;
 8000f64:	e02c      	b.n	8000fc0 <blinkind_led_traffic_y+0x74>
				HAL_GPIO_TogglePin(GPIOA, LRy_Pin);
 8000f66:	2120      	movs	r1, #32
 8000f68:	4818      	ldr	r0, [pc, #96]	@ (8000fcc <blinkind_led_traffic_y+0x80>)
 8000f6a:	f000 fe04 	bl	8001b76 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LYy_Pin, SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2140      	movs	r1, #64	@ 0x40
 8000f72:	4816      	ldr	r0, [pc, #88]	@ (8000fcc <blinkind_led_traffic_y+0x80>)
 8000f74:	f000 fde7 	bl	8001b46 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LGy_Pin, SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2180      	movs	r1, #128	@ 0x80
 8000f7c:	4813      	ldr	r0, [pc, #76]	@ (8000fcc <blinkind_led_traffic_y+0x80>)
 8000f7e:	f000 fde2 	bl	8001b46 <HAL_GPIO_WritePin>
			break;
 8000f82:	e01e      	b.n	8000fc2 <blinkind_led_traffic_y+0x76>
				HAL_GPIO_WritePin(GPIOA, LRy_Pin, SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2120      	movs	r1, #32
 8000f88:	4810      	ldr	r0, [pc, #64]	@ (8000fcc <blinkind_led_traffic_y+0x80>)
 8000f8a:	f000 fddc 	bl	8001b46 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOA, LYy_Pin);
 8000f8e:	2140      	movs	r1, #64	@ 0x40
 8000f90:	480e      	ldr	r0, [pc, #56]	@ (8000fcc <blinkind_led_traffic_y+0x80>)
 8000f92:	f000 fdf0 	bl	8001b76 <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(GPIOA, LGy_Pin, SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2180      	movs	r1, #128	@ 0x80
 8000f9a:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <blinkind_led_traffic_y+0x80>)
 8000f9c:	f000 fdd3 	bl	8001b46 <HAL_GPIO_WritePin>
			break;
 8000fa0:	e00f      	b.n	8000fc2 <blinkind_led_traffic_y+0x76>
				HAL_GPIO_WritePin(GPIOA, LRy_Pin, SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2120      	movs	r1, #32
 8000fa6:	4809      	ldr	r0, [pc, #36]	@ (8000fcc <blinkind_led_traffic_y+0x80>)
 8000fa8:	f000 fdcd 	bl	8001b46 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LYy_Pin, SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2140      	movs	r1, #64	@ 0x40
 8000fb0:	4806      	ldr	r0, [pc, #24]	@ (8000fcc <blinkind_led_traffic_y+0x80>)
 8000fb2:	f000 fdc8 	bl	8001b46 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOA, LGy_Pin);
 8000fb6:	2180      	movs	r1, #128	@ 0x80
 8000fb8:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <blinkind_led_traffic_y+0x80>)
 8000fba:	f000 fddc 	bl	8001b76 <HAL_GPIO_TogglePin>
			break;
 8000fbe:	e000      	b.n	8000fc2 <blinkind_led_traffic_y+0x76>
			break;
 8000fc0:	bf00      	nop
		}
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000078 	.word	0x20000078
 8000fcc:	40010800 	.word	0x40010800

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd4:	f000 fab4 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd8:	f000 f810 	bl	8000ffc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fdc:	f000 f896 	bl	800110c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fe0:	f000 f848 	bl	8001074 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000fe4:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <main+0x28>)
 8000fe6:	f001 fa0d 	bl	8002404 <HAL_TIM_Base_Start_IT>
  {
//	  fsm_for_input_processing();
//	  mode1();
//	  mode2();
//	  Mode_count();
	  led_7_seg_run();
 8000fea:	f7ff fe93 	bl	8000d14 <led_7_seg_run>
	  fsm_manual_run();
 8000fee:	f7ff fa73 	bl	80004d8 <fsm_manual_run>
  {
 8000ff2:	bf00      	nop
 8000ff4:	e7f9      	b.n	8000fea <main+0x1a>
 8000ff6:	bf00      	nop
 8000ff8:	20000094 	.word	0x20000094

08000ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b090      	sub	sp, #64	@ 0x40
 8001000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001002:	f107 0318 	add.w	r3, r7, #24
 8001006:	2228      	movs	r2, #40	@ 0x28
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f001 fd86 	bl	8002b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
 800101c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001022:	2301      	movs	r3, #1
 8001024:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001026:	2310      	movs	r3, #16
 8001028:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800102a:	2300      	movs	r3, #0
 800102c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102e:	f107 0318 	add.w	r3, r7, #24
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fdb8 	bl	8001ba8 <HAL_RCC_OscConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800103e:	f000 f8d3 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001042:	230f      	movs	r3, #15
 8001044:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f001 f826 	bl	80020ac <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001066:	f000 f8bf 	bl	80011e8 <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	3740      	adds	r7, #64	@ 0x40
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	463b      	mov	r3, r7
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001090:	4b1d      	ldr	r3, [pc, #116]	@ (8001108 <MX_TIM2_Init+0x94>)
 8001092:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001096:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001098:	4b1b      	ldr	r3, [pc, #108]	@ (8001108 <MX_TIM2_Init+0x94>)
 800109a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800109e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a0:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <MX_TIM2_Init+0x94>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010a6:	4b18      	ldr	r3, [pc, #96]	@ (8001108 <MX_TIM2_Init+0x94>)
 80010a8:	2209      	movs	r2, #9
 80010aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ac:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <MX_TIM2_Init+0x94>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <MX_TIM2_Init+0x94>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010b8:	4813      	ldr	r0, [pc, #76]	@ (8001108 <MX_TIM2_Init+0x94>)
 80010ba:	f001 f953 	bl	8002364 <HAL_TIM_Base_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010c4:	f000 f890 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	4619      	mov	r1, r3
 80010d4:	480c      	ldr	r0, [pc, #48]	@ (8001108 <MX_TIM2_Init+0x94>)
 80010d6:	f001 fad1 	bl	800267c <HAL_TIM_ConfigClockSource>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010e0:	f000 f882 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e4:	2300      	movs	r3, #0
 80010e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010ec:	463b      	mov	r3, r7
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	@ (8001108 <MX_TIM2_Init+0x94>)
 80010f2:	f001 fca9 	bl	8002a48 <HAL_TIMEx_MasterConfigSynchronization>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010fc:	f000 f874 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000094 	.word	0x20000094

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b28      	ldr	r3, [pc, #160]	@ (80011c4 <MX_GPIO_Init+0xb8>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a27      	ldr	r2, [pc, #156]	@ (80011c4 <MX_GPIO_Init+0xb8>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b25      	ldr	r3, [pc, #148]	@ (80011c4 <MX_GPIO_Init+0xb8>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001138:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <MX_GPIO_Init+0xb8>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a21      	ldr	r2, [pc, #132]	@ (80011c4 <MX_GPIO_Init+0xb8>)
 800113e:	f043 0308 	orr.w	r3, r3, #8
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b1f      	ldr	r3, [pc, #124]	@ (80011c4 <MX_GPIO_Init+0xb8>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LRx_Pin|LYx_Pin|LGx_Pin|LRy_Pin
 8001150:	2200      	movs	r2, #0
 8001152:	f24f 21fc 	movw	r1, #62204	@ 0xf2fc
 8001156:	481c      	ldr	r0, [pc, #112]	@ (80011c8 <MX_GPIO_Init+0xbc>)
 8001158:	f000 fcf5 	bl	8001b46 <HAL_GPIO_WritePin>
                          |LYy_Pin|LGy_Pin|D13_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 800115c:	2200      	movs	r2, #0
 800115e:	217f      	movs	r1, #127	@ 0x7f
 8001160:	481a      	ldr	r0, [pc, #104]	@ (80011cc <MX_GPIO_Init+0xc0>)
 8001162:	f000 fcf0 	bl	8001b46 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LRx_Pin LYx_Pin LGx_Pin LRy_Pin
                           LYy_Pin LGy_Pin D13_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LRx_Pin|LYx_Pin|LGx_Pin|LRy_Pin
 8001166:	f24f 23fc 	movw	r3, #62204	@ 0xf2fc
 800116a:	60bb      	str	r3, [r7, #8]
                          |LYy_Pin|LGy_Pin|D13_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2302      	movs	r3, #2
 8001176:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	4619      	mov	r1, r3
 800117e:	4812      	ldr	r0, [pc, #72]	@ (80011c8 <MX_GPIO_Init+0xbc>)
 8001180:	f000 fb4e 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8001184:	237f      	movs	r3, #127	@ 0x7f
 8001186:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2302      	movs	r3, #2
 8001192:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	4619      	mov	r1, r3
 800119a:	480c      	ldr	r0, [pc, #48]	@ (80011cc <MX_GPIO_Init+0xc0>)
 800119c:	f000 fb40 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 80011a0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80011a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	@ (80011cc <MX_GPIO_Init+0xc0>)
 80011b6:	f000 fb33 	bl	8001820 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010800 	.word	0x40010800
 80011cc:	40010c00 	.word	0x40010c00

080011d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	timer_run();
 80011d8:	f000 f8a4 	bl	8001324 <timer_run>
	button_reading();
 80011dc:	f7ff f81e 	bl	800021c <button_reading>
//	Mode_count_Buffer();
 }
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <Error_Handler+0x8>

080011f4 <setTimer0>:
int timer0_counter = 0, timer1_counter = 0, timer2_counter = 0, timer3_counter = 0, timer4_counter, timer5_counter, timer6_counter;
int timer0_flag = 0, timer1_flag = 0, timer2_flag = 0, timer3_flag = 0, timer4_flag = 0, timer5_flag = 0, timer6_flag = 0;
int TIMER_CYCLE = 1;


void setTimer0(int duration) {
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    timer0_counter = duration / TIMER_CYCLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <setTimer0+0x28>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	fb92 f3f3 	sdiv	r3, r2, r3
 8001206:	4a06      	ldr	r2, [pc, #24]	@ (8001220 <setTimer0+0x2c>)
 8001208:	6013      	str	r3, [r2, #0]
    timer0_flag = 0;
 800120a:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <setTimer0+0x30>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000024 	.word	0x20000024
 8001220:	200000dc 	.word	0x200000dc
 8001224:	200000ec 	.word	0x200000ec

08001228 <setTimer1>:
void setTimer1(int duration) {
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    timer1_counter = duration / TIMER_CYCLE;
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <setTimer1+0x28>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	fb92 f3f3 	sdiv	r3, r2, r3
 800123a:	4a06      	ldr	r2, [pc, #24]	@ (8001254 <setTimer1+0x2c>)
 800123c:	6013      	str	r3, [r2, #0]
    timer1_flag = 0;
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <setTimer1+0x30>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000024 	.word	0x20000024
 8001254:	200000e0 	.word	0x200000e0
 8001258:	200000f0 	.word	0x200000f0

0800125c <setTimer2>:
void setTimer2(int duration) {
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    timer2_counter = duration / TIMER_CYCLE;
 8001264:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <setTimer2+0x28>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	fb92 f3f3 	sdiv	r3, r2, r3
 800126e:	4a06      	ldr	r2, [pc, #24]	@ (8001288 <setTimer2+0x2c>)
 8001270:	6013      	str	r3, [r2, #0]
    timer2_flag = 0;
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <setTimer2+0x30>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000024 	.word	0x20000024
 8001288:	200000e4 	.word	0x200000e4
 800128c:	200000f4 	.word	0x200000f4

08001290 <setTimer6>:
//}
//void setTimer5(int duration){
//	timer5_counter = duration / TIMER_CYCLE;
//	timer5_flag = 0;
//}
void setTimer6(int duration){
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	timer6_counter = duration / TIMER_CYCLE;
 8001298:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <setTimer6+0x28>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	fb92 f3f3 	sdiv	r3, r2, r3
 80012a2:	4a06      	ldr	r2, [pc, #24]	@ (80012bc <setTimer6+0x2c>)
 80012a4:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <setTimer6+0x30>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000024 	.word	0x20000024
 80012bc:	200000e8 	.word	0x200000e8
 80012c0:	200000f8 	.word	0x200000f8

080012c4 <clearTimer1>:

//void clearTimer0(){
//	timer0_counter = 0;
//	timer0_flag = 0;
//}
void clearTimer1(){
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
	timer1_counter = 0;
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <clearTimer1+0x18>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
	timer1_flag = 0;
 80012ce:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <clearTimer1+0x1c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	200000e0 	.word	0x200000e0
 80012e0:	200000f0 	.word	0x200000f0

080012e4 <clearTimer2>:
void clearTimer2(){
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
	timer2_counter = 0;
 80012e8:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <clearTimer2+0x18>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 80012ee:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <clearTimer2+0x1c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	200000e4 	.word	0x200000e4
 8001300:	200000f4 	.word	0x200000f4

08001304 <clearTimer6>:
//}
//void clearTimer5(){
//	timer5_counter = 0;
//	timer5_flag = 0;
//}
void clearTimer6(){
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
	timer6_counter = 0;
 8001308:	4b04      	ldr	r3, [pc, #16]	@ (800131c <clearTimer6+0x18>)
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
	timer6_flag = 0;
 800130e:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <clearTimer6+0x1c>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	200000e8 	.word	0x200000e8
 8001320:	200000f8 	.word	0x200000f8

08001324 <timer_run>:



void timer_run() {
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
    if (timer0_counter > 0) {
 8001328:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <timer_run+0x8c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	dd0b      	ble.n	8001348 <timer_run+0x24>
        timer0_counter--;
 8001330:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <timer_run+0x8c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	3b01      	subs	r3, #1
 8001336:	4a1e      	ldr	r2, [pc, #120]	@ (80013b0 <timer_run+0x8c>)
 8001338:	6013      	str	r3, [r2, #0]
        if (timer0_counter == 0) timer0_flag = 1;
 800133a:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <timer_run+0x8c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <timer_run+0x24>
 8001342:	4b1c      	ldr	r3, [pc, #112]	@ (80013b4 <timer_run+0x90>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]
    }
    if (timer1_counter > 0) {
 8001348:	4b1b      	ldr	r3, [pc, #108]	@ (80013b8 <timer_run+0x94>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	dd0b      	ble.n	8001368 <timer_run+0x44>
        timer1_counter--;
 8001350:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <timer_run+0x94>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3b01      	subs	r3, #1
 8001356:	4a18      	ldr	r2, [pc, #96]	@ (80013b8 <timer_run+0x94>)
 8001358:	6013      	str	r3, [r2, #0]
        if (timer1_counter == 0) timer1_flag = 1;
 800135a:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <timer_run+0x94>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <timer_run+0x44>
 8001362:	4b16      	ldr	r3, [pc, #88]	@ (80013bc <timer_run+0x98>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
    }
    if (timer2_counter > 0) {
 8001368:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <timer_run+0x9c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	dd0b      	ble.n	8001388 <timer_run+0x64>
        timer2_counter--;
 8001370:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <timer_run+0x9c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3b01      	subs	r3, #1
 8001376:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <timer_run+0x9c>)
 8001378:	6013      	str	r3, [r2, #0]
        if (timer2_counter == 0) timer2_flag = 1;
 800137a:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <timer_run+0x9c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <timer_run+0x64>
 8001382:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <timer_run+0xa0>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]
//        timer5_counter--;
//        if (timer5_counter == 0){
//        	timer5_flag = 1;
//        }
//    }
    if (timer6_counter > 0) {
 8001388:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <timer_run+0xa4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	dd0b      	ble.n	80013a8 <timer_run+0x84>
        timer6_counter--;
 8001390:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <timer_run+0xa4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	3b01      	subs	r3, #1
 8001396:	4a0c      	ldr	r2, [pc, #48]	@ (80013c8 <timer_run+0xa4>)
 8001398:	6013      	str	r3, [r2, #0]
        if (timer6_counter == 0){
 800139a:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <timer_run+0xa4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <timer_run+0x84>
        	timer6_flag = 1;
 80013a2:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <timer_run+0xa8>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
        }
    }

}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	200000dc 	.word	0x200000dc
 80013b4:	200000ec 	.word	0x200000ec
 80013b8:	200000e0 	.word	0x200000e0
 80013bc:	200000f0 	.word	0x200000f0
 80013c0:	200000e4 	.word	0x200000e4
 80013c4:	200000f4 	.word	0x200000f4
 80013c8:	200000e8 	.word	0x200000e8
 80013cc:	200000f8 	.word	0x200000f8

080013d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_MspInit+0x5c>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	4a14      	ldr	r2, [pc, #80]	@ (800142c <HAL_MspInit+0x5c>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6193      	str	r3, [r2, #24]
 80013e2:	4b12      	ldr	r3, [pc, #72]	@ (800142c <HAL_MspInit+0x5c>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <HAL_MspInit+0x5c>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4a0e      	ldr	r2, [pc, #56]	@ (800142c <HAL_MspInit+0x5c>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f8:	61d3      	str	r3, [r2, #28]
 80013fa:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <HAL_MspInit+0x5c>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001406:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <HAL_MspInit+0x60>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	4a04      	ldr	r2, [pc, #16]	@ (8001430 <HAL_MspInit+0x60>)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	40021000 	.word	0x40021000
 8001430:	40010000 	.word	0x40010000

08001434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001444:	d113      	bne.n	800146e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <HAL_TIM_Base_MspInit+0x44>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a0b      	ldr	r2, [pc, #44]	@ (8001478 <HAL_TIM_Base_MspInit+0x44>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <HAL_TIM_Base_MspInit+0x44>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	201c      	movs	r0, #28
 8001464:	f000 f9a5 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001468:	201c      	movs	r0, #28
 800146a:	f000 f9be 	bl	80017ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000

0800147c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <NMI_Handler+0x4>

08001484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <MemManage_Handler+0x4>

08001494 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014cc:	f000 f87e 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014d8:	4802      	ldr	r0, [pc, #8]	@ (80014e4 <TIM2_IRQHandler+0x10>)
 80014da:	f000 ffdf 	bl	800249c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000094 	.word	0x20000094

080014e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014f4:	f7ff fff8 	bl	80014e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f8:	480b      	ldr	r0, [pc, #44]	@ (8001528 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014fa:	490c      	ldr	r1, [pc, #48]	@ (800152c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001530 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a09      	ldr	r2, [pc, #36]	@ (8001534 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001510:	4c09      	ldr	r4, [pc, #36]	@ (8001538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800151e:	f001 fb05 	bl	8002b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001522:	f7ff fd55 	bl	8000fd0 <main>
  bx lr
 8001526:	4770      	bx	lr
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001530:	08002bb8 	.word	0x08002bb8
  ldr r2, =_sbss
 8001534:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001538:	20000100 	.word	0x20000100

0800153c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC1_2_IRQHandler>
	...

08001540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001544:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <HAL_Init+0x28>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	@ (8001568 <HAL_Init+0x28>)
 800154a:	f043 0310 	orr.w	r3, r3, #16
 800154e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f923 	bl	800179c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001556:	200f      	movs	r0, #15
 8001558:	f000 f808 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800155c:	f7ff ff38 	bl	80013d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40022000 	.word	0x40022000

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001574:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <HAL_InitTick+0x54>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <HAL_InitTick+0x58>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001582:	fbb3 f3f1 	udiv	r3, r3, r1
 8001586:	fbb2 f3f3 	udiv	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f93b 	bl	8001806 <HAL_SYSTICK_Config>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e00e      	b.n	80015b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d80a      	bhi.n	80015b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f000 f903 	bl	80017b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ac:	4a06      	ldr	r2, [pc, #24]	@ (80015c8 <HAL_InitTick+0x5c>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000028 	.word	0x20000028
 80015c4:	20000030 	.word	0x20000030
 80015c8:	2000002c 	.word	0x2000002c

080015cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d0:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <HAL_IncTick+0x1c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <HAL_IncTick+0x20>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	4a03      	ldr	r2, [pc, #12]	@ (80015ec <HAL_IncTick+0x20>)
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	20000030 	.word	0x20000030
 80015ec:	200000fc 	.word	0x200000fc

080015f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return uwTick;
 80015f4:	4b02      	ldr	r3, [pc, #8]	@ (8001600 <HAL_GetTick+0x10>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	200000fc 	.word	0x200000fc

08001604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800162c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001636:	4a04      	ldr	r2, [pc, #16]	@ (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	60d3      	str	r3, [r2, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db0b      	blt.n	8001692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4906      	ldr	r1, [pc, #24]	@ (800169c <__NVIC_EnableIRQ+0x34>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2001      	movs	r0, #1
 800168a:	fa00 f202 	lsl.w	r2, r0, r2
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	e000e100 	.word	0xe000e100

080016a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	@ (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	@ (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	@ 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
         );
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	@ 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001768:	d301      	bcc.n	800176e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176a:	2301      	movs	r3, #1
 800176c:	e00f      	b.n	800178e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <SysTick_Config+0x40>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001776:	210f      	movs	r1, #15
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f7ff ff90 	bl	80016a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <SysTick_Config+0x40>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <SysTick_Config+0x40>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff2d 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff42 	bl	800164c <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff90 	bl	80016f4 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5f 	bl	80016a0 <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff35 	bl	8001668 <__NVIC_EnableIRQ>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffa2 	bl	8001758 <SysTick_Config>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b08b      	sub	sp, #44	@ 0x2c
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001832:	e161      	b.n	8001af8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001834:	2201      	movs	r2, #1
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	429a      	cmp	r2, r3
 800184e:	f040 8150 	bne.w	8001af2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4a97      	ldr	r2, [pc, #604]	@ (8001ab4 <HAL_GPIO_Init+0x294>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d05e      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 800185c:	4a95      	ldr	r2, [pc, #596]	@ (8001ab4 <HAL_GPIO_Init+0x294>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d875      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 8001862:	4a95      	ldr	r2, [pc, #596]	@ (8001ab8 <HAL_GPIO_Init+0x298>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d058      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 8001868:	4a93      	ldr	r2, [pc, #588]	@ (8001ab8 <HAL_GPIO_Init+0x298>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d86f      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 800186e:	4a93      	ldr	r2, [pc, #588]	@ (8001abc <HAL_GPIO_Init+0x29c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d052      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 8001874:	4a91      	ldr	r2, [pc, #580]	@ (8001abc <HAL_GPIO_Init+0x29c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d869      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 800187a:	4a91      	ldr	r2, [pc, #580]	@ (8001ac0 <HAL_GPIO_Init+0x2a0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d04c      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 8001880:	4a8f      	ldr	r2, [pc, #572]	@ (8001ac0 <HAL_GPIO_Init+0x2a0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d863      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 8001886:	4a8f      	ldr	r2, [pc, #572]	@ (8001ac4 <HAL_GPIO_Init+0x2a4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d046      	beq.n	800191a <HAL_GPIO_Init+0xfa>
 800188c:	4a8d      	ldr	r2, [pc, #564]	@ (8001ac4 <HAL_GPIO_Init+0x2a4>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d85d      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 8001892:	2b12      	cmp	r3, #18
 8001894:	d82a      	bhi.n	80018ec <HAL_GPIO_Init+0xcc>
 8001896:	2b12      	cmp	r3, #18
 8001898:	d859      	bhi.n	800194e <HAL_GPIO_Init+0x12e>
 800189a:	a201      	add	r2, pc, #4	@ (adr r2, 80018a0 <HAL_GPIO_Init+0x80>)
 800189c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a0:	0800191b 	.word	0x0800191b
 80018a4:	080018f5 	.word	0x080018f5
 80018a8:	08001907 	.word	0x08001907
 80018ac:	08001949 	.word	0x08001949
 80018b0:	0800194f 	.word	0x0800194f
 80018b4:	0800194f 	.word	0x0800194f
 80018b8:	0800194f 	.word	0x0800194f
 80018bc:	0800194f 	.word	0x0800194f
 80018c0:	0800194f 	.word	0x0800194f
 80018c4:	0800194f 	.word	0x0800194f
 80018c8:	0800194f 	.word	0x0800194f
 80018cc:	0800194f 	.word	0x0800194f
 80018d0:	0800194f 	.word	0x0800194f
 80018d4:	0800194f 	.word	0x0800194f
 80018d8:	0800194f 	.word	0x0800194f
 80018dc:	0800194f 	.word	0x0800194f
 80018e0:	0800194f 	.word	0x0800194f
 80018e4:	080018fd 	.word	0x080018fd
 80018e8:	08001911 	.word	0x08001911
 80018ec:	4a76      	ldr	r2, [pc, #472]	@ (8001ac8 <HAL_GPIO_Init+0x2a8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d013      	beq.n	800191a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018f2:	e02c      	b.n	800194e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	623b      	str	r3, [r7, #32]
          break;
 80018fa:	e029      	b.n	8001950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	3304      	adds	r3, #4
 8001902:	623b      	str	r3, [r7, #32]
          break;
 8001904:	e024      	b.n	8001950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	3308      	adds	r3, #8
 800190c:	623b      	str	r3, [r7, #32]
          break;
 800190e:	e01f      	b.n	8001950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	330c      	adds	r3, #12
 8001916:	623b      	str	r3, [r7, #32]
          break;
 8001918:	e01a      	b.n	8001950 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001922:	2304      	movs	r3, #4
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e013      	b.n	8001950 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d105      	bne.n	800193c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001930:	2308      	movs	r3, #8
 8001932:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	611a      	str	r2, [r3, #16]
          break;
 800193a:	e009      	b.n	8001950 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800193c:	2308      	movs	r3, #8
 800193e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	615a      	str	r2, [r3, #20]
          break;
 8001946:	e003      	b.n	8001950 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
          break;
 800194c:	e000      	b.n	8001950 <HAL_GPIO_Init+0x130>
          break;
 800194e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2bff      	cmp	r3, #255	@ 0xff
 8001954:	d801      	bhi.n	800195a <HAL_GPIO_Init+0x13a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	e001      	b.n	800195e <HAL_GPIO_Init+0x13e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3304      	adds	r3, #4
 800195e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2bff      	cmp	r3, #255	@ 0xff
 8001964:	d802      	bhi.n	800196c <HAL_GPIO_Init+0x14c>
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	e002      	b.n	8001972 <HAL_GPIO_Init+0x152>
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	3b08      	subs	r3, #8
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	210f      	movs	r1, #15
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	401a      	ands	r2, r3
 8001984:	6a39      	ldr	r1, [r7, #32]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	431a      	orrs	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80a9 	beq.w	8001af2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019a0:	4b4a      	ldr	r3, [pc, #296]	@ (8001acc <HAL_GPIO_Init+0x2ac>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4a49      	ldr	r2, [pc, #292]	@ (8001acc <HAL_GPIO_Init+0x2ac>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6193      	str	r3, [r2, #24]
 80019ac:	4b47      	ldr	r3, [pc, #284]	@ (8001acc <HAL_GPIO_Init+0x2ac>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019b8:	4a45      	ldr	r2, [pc, #276]	@ (8001ad0 <HAL_GPIO_Init+0x2b0>)
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4013      	ands	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a3d      	ldr	r2, [pc, #244]	@ (8001ad4 <HAL_GPIO_Init+0x2b4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d00d      	beq.n	8001a00 <HAL_GPIO_Init+0x1e0>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ad8 <HAL_GPIO_Init+0x2b8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d007      	beq.n	80019fc <HAL_GPIO_Init+0x1dc>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a3b      	ldr	r2, [pc, #236]	@ (8001adc <HAL_GPIO_Init+0x2bc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d101      	bne.n	80019f8 <HAL_GPIO_Init+0x1d8>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e004      	b.n	8001a02 <HAL_GPIO_Init+0x1e2>
 80019f8:	2303      	movs	r3, #3
 80019fa:	e002      	b.n	8001a02 <HAL_GPIO_Init+0x1e2>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_GPIO_Init+0x1e2>
 8001a00:	2300      	movs	r3, #0
 8001a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a04:	f002 0203 	and.w	r2, r2, #3
 8001a08:	0092      	lsls	r2, r2, #2
 8001a0a:	4093      	lsls	r3, r2
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a12:	492f      	ldr	r1, [pc, #188]	@ (8001ad0 <HAL_GPIO_Init+0x2b0>)
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae0 <HAL_GPIO_Init+0x2c0>)
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	492b      	ldr	r1, [pc, #172]	@ (8001ae0 <HAL_GPIO_Init+0x2c0>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a3a:	4b29      	ldr	r3, [pc, #164]	@ (8001ae0 <HAL_GPIO_Init+0x2c0>)
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4927      	ldr	r1, [pc, #156]	@ (8001ae0 <HAL_GPIO_Init+0x2c0>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a54:	4b22      	ldr	r3, [pc, #136]	@ (8001ae0 <HAL_GPIO_Init+0x2c0>)
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	4921      	ldr	r1, [pc, #132]	@ (8001ae0 <HAL_GPIO_Init+0x2c0>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	60cb      	str	r3, [r1, #12]
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a62:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae0 <HAL_GPIO_Init+0x2c0>)
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	491d      	ldr	r1, [pc, #116]	@ (8001ae0 <HAL_GPIO_Init+0x2c0>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ae0 <HAL_GPIO_Init+0x2c0>)
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	4917      	ldr	r1, [pc, #92]	@ (8001ae0 <HAL_GPIO_Init+0x2c0>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <HAL_GPIO_Init+0x2c0>)
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	4913      	ldr	r1, [pc, #76]	@ (8001ae0 <HAL_GPIO_Init+0x2c0>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d01f      	beq.n	8001ae4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <HAL_GPIO_Init+0x2c0>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	490d      	ldr	r1, [pc, #52]	@ (8001ae0 <HAL_GPIO_Init+0x2c0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	600b      	str	r3, [r1, #0]
 8001ab0:	e01f      	b.n	8001af2 <HAL_GPIO_Init+0x2d2>
 8001ab2:	bf00      	nop
 8001ab4:	10320000 	.word	0x10320000
 8001ab8:	10310000 	.word	0x10310000
 8001abc:	10220000 	.word	0x10220000
 8001ac0:	10210000 	.word	0x10210000
 8001ac4:	10120000 	.word	0x10120000
 8001ac8:	10110000 	.word	0x10110000
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	40010800 	.word	0x40010800
 8001ad8:	40010c00 	.word	0x40010c00
 8001adc:	40011000 	.word	0x40011000
 8001ae0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <HAL_GPIO_Init+0x2f4>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	4909      	ldr	r1, [pc, #36]	@ (8001b14 <HAL_GPIO_Init+0x2f4>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	3301      	adds	r3, #1
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	fa22 f303 	lsr.w	r3, r2, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f47f ae96 	bne.w	8001834 <HAL_GPIO_Init+0x14>
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	372c      	adds	r7, #44	@ 0x2c
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	40010400 	.word	0x40010400

08001b18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	887b      	ldrh	r3, [r7, #2]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
 8001b34:	e001      	b.n	8001b3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	807b      	strh	r3, [r7, #2]
 8001b52:	4613      	mov	r3, r2
 8001b54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b56:	787b      	ldrb	r3, [r7, #1]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b5c:	887a      	ldrh	r2, [r7, #2]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b62:	e003      	b.n	8001b6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b64:	887b      	ldrh	r3, [r7, #2]
 8001b66:	041a      	lsls	r2, r3, #16
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	611a      	str	r2, [r3, #16]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b085      	sub	sp, #20
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b88:	887a      	ldrh	r2, [r7, #2]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	041a      	lsls	r2, r3, #16
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	887b      	ldrh	r3, [r7, #2]
 8001b96:	400b      	ands	r3, r1
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	611a      	str	r2, [r3, #16]
}
 8001b9e:	bf00      	nop
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e272      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 8087 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc8:	4b92      	ldr	r3, [pc, #584]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d00c      	beq.n	8001bee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bd4:	4b8f      	ldr	r3, [pc, #572]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d112      	bne.n	8001c06 <HAL_RCC_OscConfig+0x5e>
 8001be0:	4b8c      	ldr	r3, [pc, #560]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bec:	d10b      	bne.n	8001c06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bee:	4b89      	ldr	r3, [pc, #548]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d06c      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x12c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d168      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e24c      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_OscConfig+0x76>
 8001c10:	4b80      	ldr	r3, [pc, #512]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a7f      	ldr	r2, [pc, #508]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	e02e      	b.n	8001c7c <HAL_RCC_OscConfig+0xd4>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x98>
 8001c26:	4b7b      	ldr	r3, [pc, #492]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a7a      	ldr	r2, [pc, #488]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	4b78      	ldr	r3, [pc, #480]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a77      	ldr	r2, [pc, #476]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e01d      	b.n	8001c7c <HAL_RCC_OscConfig+0xd4>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0xbc>
 8001c4a:	4b72      	ldr	r3, [pc, #456]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a71      	ldr	r2, [pc, #452]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b6f      	ldr	r3, [pc, #444]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e00b      	b.n	8001c7c <HAL_RCC_OscConfig+0xd4>
 8001c64:	4b6b      	ldr	r3, [pc, #428]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a6a      	ldr	r2, [pc, #424]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b68      	ldr	r3, [pc, #416]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a67      	ldr	r2, [pc, #412]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d013      	beq.n	8001cac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff fcb4 	bl	80015f0 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c8c:	f7ff fcb0 	bl	80015f0 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b64      	cmp	r3, #100	@ 0x64
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e200      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	4b5d      	ldr	r3, [pc, #372]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0xe4>
 8001caa:	e014      	b.n	8001cd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fca0 	bl	80015f0 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff fc9c 	bl	80015f0 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	@ 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e1ec      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	4b53      	ldr	r3, [pc, #332]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x10c>
 8001cd2:	e000      	b.n	8001cd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d063      	beq.n	8001daa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cee:	4b49      	ldr	r3, [pc, #292]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d11c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x18c>
 8001cfa:	4b46      	ldr	r3, [pc, #280]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d116      	bne.n	8001d34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	4b43      	ldr	r3, [pc, #268]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_RCC_OscConfig+0x176>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e1c0      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4939      	ldr	r1, [pc, #228]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	e03a      	b.n	8001daa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d020      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3c:	4b36      	ldr	r3, [pc, #216]	@ (8001e18 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7ff fc55 	bl	80015f0 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4a:	f7ff fc51 	bl	80015f0 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e1a1      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d68:	4b2a      	ldr	r3, [pc, #168]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4927      	ldr	r1, [pc, #156]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]
 8001d7c:	e015      	b.n	8001daa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7e:	4b26      	ldr	r3, [pc, #152]	@ (8001e18 <HAL_RCC_OscConfig+0x270>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7ff fc34 	bl	80015f0 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8c:	f7ff fc30 	bl	80015f0 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e180      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d03a      	beq.n	8001e2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d019      	beq.n	8001df2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dbe:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <HAL_RCC_OscConfig+0x274>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc4:	f7ff fc14 	bl	80015f0 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7ff fc10 	bl	80015f0 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e160      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dea:	2001      	movs	r0, #1
 8001dec:	f000 fa9c 	bl	8002328 <RCC_Delay>
 8001df0:	e01c      	b.n	8001e2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <HAL_RCC_OscConfig+0x274>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df8:	f7ff fbfa 	bl	80015f0 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfe:	e00f      	b.n	8001e20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e00:	f7ff fbf6 	bl	80015f0 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d908      	bls.n	8001e20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e146      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	42420000 	.word	0x42420000
 8001e1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e20:	4b92      	ldr	r3, [pc, #584]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1e9      	bne.n	8001e00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80a6 	beq.w	8001f86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3e:	4b8b      	ldr	r3, [pc, #556]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10d      	bne.n	8001e66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	4b88      	ldr	r3, [pc, #544]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	4a87      	ldr	r2, [pc, #540]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e54:	61d3      	str	r3, [r2, #28]
 8001e56:	4b85      	ldr	r3, [pc, #532]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e62:	2301      	movs	r3, #1
 8001e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e66:	4b82      	ldr	r3, [pc, #520]	@ (8002070 <HAL_RCC_OscConfig+0x4c8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d118      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e72:	4b7f      	ldr	r3, [pc, #508]	@ (8002070 <HAL_RCC_OscConfig+0x4c8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a7e      	ldr	r2, [pc, #504]	@ (8002070 <HAL_RCC_OscConfig+0x4c8>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff fbb7 	bl	80015f0 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e86:	f7ff fbb3 	bl	80015f0 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b64      	cmp	r3, #100	@ 0x64
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e103      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	4b75      	ldr	r3, [pc, #468]	@ (8002070 <HAL_RCC_OscConfig+0x4c8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x312>
 8001eac:	4b6f      	ldr	r3, [pc, #444]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4a6e      	ldr	r2, [pc, #440]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6213      	str	r3, [r2, #32]
 8001eb8:	e02d      	b.n	8001f16 <HAL_RCC_OscConfig+0x36e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x334>
 8001ec2:	4b6a      	ldr	r3, [pc, #424]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a69      	ldr	r2, [pc, #420]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f023 0301 	bic.w	r3, r3, #1
 8001ecc:	6213      	str	r3, [r2, #32]
 8001ece:	4b67      	ldr	r3, [pc, #412]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a66      	ldr	r2, [pc, #408]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	f023 0304 	bic.w	r3, r3, #4
 8001ed8:	6213      	str	r3, [r2, #32]
 8001eda:	e01c      	b.n	8001f16 <HAL_RCC_OscConfig+0x36e>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b05      	cmp	r3, #5
 8001ee2:	d10c      	bne.n	8001efe <HAL_RCC_OscConfig+0x356>
 8001ee4:	4b61      	ldr	r3, [pc, #388]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a60      	ldr	r2, [pc, #384]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	4b5e      	ldr	r3, [pc, #376]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a5d      	ldr	r2, [pc, #372]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6213      	str	r3, [r2, #32]
 8001efc:	e00b      	b.n	8001f16 <HAL_RCC_OscConfig+0x36e>
 8001efe:	4b5b      	ldr	r3, [pc, #364]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a5a      	ldr	r2, [pc, #360]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	6213      	str	r3, [r2, #32]
 8001f0a:	4b58      	ldr	r3, [pc, #352]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a57      	ldr	r2, [pc, #348]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f023 0304 	bic.w	r3, r3, #4
 8001f14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d015      	beq.n	8001f4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7ff fb67 	bl	80015f0 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7ff fb63 	bl	80015f0 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e0b1      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3c:	4b4b      	ldr	r3, [pc, #300]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0ee      	beq.n	8001f26 <HAL_RCC_OscConfig+0x37e>
 8001f48:	e014      	b.n	8001f74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff fb51 	bl	80015f0 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7ff fb4d 	bl	80015f0 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e09b      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f68:	4b40      	ldr	r3, [pc, #256]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1ee      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d105      	bne.n	8001f86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7a:	4b3c      	ldr	r3, [pc, #240]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	4a3b      	ldr	r2, [pc, #236]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 8087 	beq.w	800209e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f90:	4b36      	ldr	r3, [pc, #216]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d061      	beq.n	8002060 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d146      	bne.n	8002032 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa4:	4b33      	ldr	r3, [pc, #204]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001faa:	f7ff fb21 	bl	80015f0 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb2:	f7ff fb1d 	bl	80015f0 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e06d      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc4:	4b29      	ldr	r3, [pc, #164]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f0      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd8:	d108      	bne.n	8001fec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fda:	4b24      	ldr	r3, [pc, #144]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4921      	ldr	r1, [pc, #132]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fec:	4b1f      	ldr	r3, [pc, #124]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a19      	ldr	r1, [r3, #32]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	491b      	ldr	r1, [pc, #108]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002004:	4b1b      	ldr	r3, [pc, #108]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7ff faf1 	bl	80015f0 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002012:	f7ff faed 	bl	80015f0 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e03d      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x46a>
 8002030:	e035      	b.n	800209e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002032:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7ff fada 	bl	80015f0 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002040:	f7ff fad6 	bl	80015f0 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e026      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_RCC_OscConfig+0x4c4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x498>
 800205e:	e01e      	b.n	800209e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d107      	bne.n	8002078 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e019      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
 800206c:	40021000 	.word	0x40021000
 8002070:	40007000 	.word	0x40007000
 8002074:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <HAL_RCC_OscConfig+0x500>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	429a      	cmp	r2, r3
 800208a:	d106      	bne.n	800209a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	429a      	cmp	r2, r3
 8002098:	d001      	beq.n	800209e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000

080020ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0d0      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020c0:	4b6a      	ldr	r3, [pc, #424]	@ (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d910      	bls.n	80020f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	4b67      	ldr	r3, [pc, #412]	@ (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 0207 	bic.w	r2, r3, #7
 80020d6:	4965      	ldr	r1, [pc, #404]	@ (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b63      	ldr	r3, [pc, #396]	@ (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d001      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0b8      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002108:	4b59      	ldr	r3, [pc, #356]	@ (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a58      	ldr	r2, [pc, #352]	@ (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002112:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002120:	4b53      	ldr	r3, [pc, #332]	@ (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a52      	ldr	r2, [pc, #328]	@ (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800212a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800212c:	4b50      	ldr	r3, [pc, #320]	@ (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	494d      	ldr	r1, [pc, #308]	@ (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d040      	beq.n	80021cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d107      	bne.n	8002162 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b47      	ldr	r3, [pc, #284]	@ (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d115      	bne.n	800218a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e07f      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d107      	bne.n	800217a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216a:	4b41      	ldr	r3, [pc, #260]	@ (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e073      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217a:	4b3d      	ldr	r3, [pc, #244]	@ (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e06b      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800218a:	4b39      	ldr	r3, [pc, #228]	@ (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f023 0203 	bic.w	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4936      	ldr	r1, [pc, #216]	@ (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800219c:	f7ff fa28 	bl	80015f0 <HAL_GetTick>
 80021a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a2:	e00a      	b.n	80021ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a4:	f7ff fa24 	bl	80015f0 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e053      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 020c 	and.w	r2, r3, #12
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d1eb      	bne.n	80021a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021cc:	4b27      	ldr	r3, [pc, #156]	@ (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d210      	bcs.n	80021fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b24      	ldr	r3, [pc, #144]	@ (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f023 0207 	bic.w	r2, r3, #7
 80021e2:	4922      	ldr	r1, [pc, #136]	@ (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ea:	4b20      	ldr	r3, [pc, #128]	@ (800226c <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e032      	b.n	8002262 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002208:	4b19      	ldr	r3, [pc, #100]	@ (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	4916      	ldr	r1, [pc, #88]	@ (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	4313      	orrs	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d009      	beq.n	800223a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002226:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	490e      	ldr	r1, [pc, #56]	@ (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800223a:	f000 f821 	bl	8002280 <HAL_RCC_GetSysClockFreq>
 800223e:	4602      	mov	r2, r0
 8002240:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	490a      	ldr	r1, [pc, #40]	@ (8002274 <HAL_RCC_ClockConfig+0x1c8>)
 800224c:	5ccb      	ldrb	r3, [r1, r3]
 800224e:	fa22 f303 	lsr.w	r3, r2, r3
 8002252:	4a09      	ldr	r2, [pc, #36]	@ (8002278 <HAL_RCC_ClockConfig+0x1cc>)
 8002254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002256:	4b09      	ldr	r3, [pc, #36]	@ (800227c <HAL_RCC_ClockConfig+0x1d0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff f986 	bl	800156c <HAL_InitTick>

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40022000 	.word	0x40022000
 8002270:	40021000 	.word	0x40021000
 8002274:	08002b8c 	.word	0x08002b8c
 8002278:	20000028 	.word	0x20000028
 800227c:	2000002c 	.word	0x2000002c

08002280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800229a:	4b1e      	ldr	r3, [pc, #120]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x94>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d002      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x30>
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_GetSysClockFreq+0x36>
 80022ae:	e027      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022b0:	4b19      	ldr	r3, [pc, #100]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x98>)
 80022b2:	613b      	str	r3, [r7, #16]
      break;
 80022b4:	e027      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	0c9b      	lsrs	r3, r3, #18
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	4a17      	ldr	r2, [pc, #92]	@ (800231c <HAL_RCC_GetSysClockFreq+0x9c>)
 80022c0:	5cd3      	ldrb	r3, [r2, r3]
 80022c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d010      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ce:	4b11      	ldr	r3, [pc, #68]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x94>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	0c5b      	lsrs	r3, r3, #17
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	4a11      	ldr	r2, [pc, #68]	@ (8002320 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022da:	5cd3      	ldrb	r3, [r2, r3]
 80022dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x98>)
 80022e2:	fb03 f202 	mul.w	r2, r3, r2
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e004      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002324 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	613b      	str	r3, [r7, #16]
      break;
 80022fe:	e002      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x98>)
 8002302:	613b      	str	r3, [r7, #16]
      break;
 8002304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002306:	693b      	ldr	r3, [r7, #16]
}
 8002308:	4618      	mov	r0, r3
 800230a:	371c      	adds	r7, #28
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	007a1200 	.word	0x007a1200
 800231c:	08002b9c 	.word	0x08002b9c
 8002320:	08002bac 	.word	0x08002bac
 8002324:	003d0900 	.word	0x003d0900

08002328 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002330:	4b0a      	ldr	r3, [pc, #40]	@ (800235c <RCC_Delay+0x34>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0a      	ldr	r2, [pc, #40]	@ (8002360 <RCC_Delay+0x38>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0a5b      	lsrs	r3, r3, #9
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002344:	bf00      	nop
  }
  while (Delay --);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	60fa      	str	r2, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f9      	bne.n	8002344 <RCC_Delay+0x1c>
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	20000028 	.word	0x20000028
 8002360:	10624dd3 	.word	0x10624dd3

08002364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e041      	b.n	80023fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff f852 	bl	8001434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3304      	adds	r3, #4
 80023a0:	4619      	mov	r1, r3
 80023a2:	4610      	mov	r0, r2
 80023a4:	f000 fa56 	bl	8002854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b01      	cmp	r3, #1
 8002416:	d001      	beq.n	800241c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e035      	b.n	8002488 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a16      	ldr	r2, [pc, #88]	@ (8002494 <HAL_TIM_Base_Start_IT+0x90>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d009      	beq.n	8002452 <HAL_TIM_Base_Start_IT+0x4e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002446:	d004      	beq.n	8002452 <HAL_TIM_Base_Start_IT+0x4e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a12      	ldr	r2, [pc, #72]	@ (8002498 <HAL_TIM_Base_Start_IT+0x94>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d111      	bne.n	8002476 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b06      	cmp	r3, #6
 8002462:	d010      	beq.n	8002486 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002474:	e007      	b.n	8002486 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0201 	orr.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40012c00 	.word	0x40012c00
 8002498:	40000400 	.word	0x40000400

0800249c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d020      	beq.n	8002500 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01b      	beq.n	8002500 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0202 	mvn.w	r2, #2
 80024d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f998 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 80024ec:	e005      	b.n	80024fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f98b 	bl	800280a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f99a 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	d020      	beq.n	800254c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01b      	beq.n	800254c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0204 	mvn.w	r2, #4
 800251c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2202      	movs	r2, #2
 8002522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f972 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 8002538:	e005      	b.n	8002546 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f965 	bl	800280a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f974 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d020      	beq.n	8002598 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01b      	beq.n	8002598 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0208 	mvn.w	r2, #8
 8002568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2204      	movs	r2, #4
 800256e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f94c 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 8002584:	e005      	b.n	8002592 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f93f 	bl	800280a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f94e 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d020      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01b      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0210 	mvn.w	r2, #16
 80025b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2208      	movs	r2, #8
 80025ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f926 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 80025d0:	e005      	b.n	80025de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f919 	bl	800280a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f928 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00c      	beq.n	8002608 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0201 	mvn.w	r2, #1
 8002600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe fde4 	bl	80011d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00c      	beq.n	800262c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fa6f 	bl	8002b0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00c      	beq.n	8002650 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f8f8 	bl	8002840 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00c      	beq.n	8002674 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0220 	mvn.w	r2, #32
 800266c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fa42 	bl	8002af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_TIM_ConfigClockSource+0x1c>
 8002694:	2302      	movs	r3, #2
 8002696:	e0b4      	b.n	8002802 <HAL_TIM_ConfigClockSource+0x186>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026d0:	d03e      	beq.n	8002750 <HAL_TIM_ConfigClockSource+0xd4>
 80026d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026d6:	f200 8087 	bhi.w	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 80026da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026de:	f000 8086 	beq.w	80027ee <HAL_TIM_ConfigClockSource+0x172>
 80026e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026e6:	d87f      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 80026e8:	2b70      	cmp	r3, #112	@ 0x70
 80026ea:	d01a      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0xa6>
 80026ec:	2b70      	cmp	r3, #112	@ 0x70
 80026ee:	d87b      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 80026f0:	2b60      	cmp	r3, #96	@ 0x60
 80026f2:	d050      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x11a>
 80026f4:	2b60      	cmp	r3, #96	@ 0x60
 80026f6:	d877      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 80026f8:	2b50      	cmp	r3, #80	@ 0x50
 80026fa:	d03c      	beq.n	8002776 <HAL_TIM_ConfigClockSource+0xfa>
 80026fc:	2b50      	cmp	r3, #80	@ 0x50
 80026fe:	d873      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002700:	2b40      	cmp	r3, #64	@ 0x40
 8002702:	d058      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002704:	2b40      	cmp	r3, #64	@ 0x40
 8002706:	d86f      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002708:	2b30      	cmp	r3, #48	@ 0x30
 800270a:	d064      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x15a>
 800270c:	2b30      	cmp	r3, #48	@ 0x30
 800270e:	d86b      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002710:	2b20      	cmp	r3, #32
 8002712:	d060      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002714:	2b20      	cmp	r3, #32
 8002716:	d867      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002718:	2b00      	cmp	r3, #0
 800271a:	d05c      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x15a>
 800271c:	2b10      	cmp	r3, #16
 800271e:	d05a      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002720:	e062      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002732:	f000 f96a 	bl	8002a0a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	609a      	str	r2, [r3, #8]
      break;
 800274e:	e04f      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002760:	f000 f953 	bl	8002a0a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002772:	609a      	str	r2, [r3, #8]
      break;
 8002774:	e03c      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002782:	461a      	mov	r2, r3
 8002784:	f000 f8ca 	bl	800291c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2150      	movs	r1, #80	@ 0x50
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f921 	bl	80029d6 <TIM_ITRx_SetConfig>
      break;
 8002794:	e02c      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027a2:	461a      	mov	r2, r3
 80027a4:	f000 f8e8 	bl	8002978 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2160      	movs	r1, #96	@ 0x60
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 f911 	bl	80029d6 <TIM_ITRx_SetConfig>
      break;
 80027b4:	e01c      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c2:	461a      	mov	r2, r3
 80027c4:	f000 f8aa 	bl	800291c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2140      	movs	r1, #64	@ 0x40
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f901 	bl	80029d6 <TIM_ITRx_SetConfig>
      break;
 80027d4:	e00c      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4619      	mov	r1, r3
 80027e0:	4610      	mov	r0, r2
 80027e2:	f000 f8f8 	bl	80029d6 <TIM_ITRx_SetConfig>
      break;
 80027e6:	e003      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
      break;
 80027ec:	e000      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002800:	7bfb      	ldrb	r3, [r7, #15]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
	...

08002854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a2b      	ldr	r2, [pc, #172]	@ (8002914 <TIM_Base_SetConfig+0xc0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d007      	beq.n	800287c <TIM_Base_SetConfig+0x28>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002872:	d003      	beq.n	800287c <TIM_Base_SetConfig+0x28>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a28      	ldr	r2, [pc, #160]	@ (8002918 <TIM_Base_SetConfig+0xc4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d108      	bne.n	800288e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a20      	ldr	r2, [pc, #128]	@ (8002914 <TIM_Base_SetConfig+0xc0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d007      	beq.n	80028a6 <TIM_Base_SetConfig+0x52>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800289c:	d003      	beq.n	80028a6 <TIM_Base_SetConfig+0x52>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002918 <TIM_Base_SetConfig+0xc4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d108      	bne.n	80028b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a0d      	ldr	r2, [pc, #52]	@ (8002914 <TIM_Base_SetConfig+0xc0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d103      	bne.n	80028ec <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f023 0201 	bic.w	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	611a      	str	r2, [r3, #16]
  }
}
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	40012c00 	.word	0x40012c00
 8002918:	40000400 	.word	0x40000400

0800291c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	f023 0201 	bic.w	r2, r3, #1
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f023 030a 	bic.w	r3, r3, #10
 8002958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	621a      	str	r2, [r3, #32]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	f023 0210 	bic.w	r2, r3, #16
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80029a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	031b      	lsls	r3, r3, #12
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80029b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	621a      	str	r2, [r3, #32]
}
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f043 0307 	orr.w	r3, r3, #7
 80029f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	609a      	str	r2, [r3, #8]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b087      	sub	sp, #28
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	021a      	lsls	r2, r3, #8
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	609a      	str	r2, [r3, #8]
}
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e041      	b.n	8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a14      	ldr	r2, [pc, #80]	@ (8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d009      	beq.n	8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aac:	d004      	beq.n	8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a10      	ldr	r2, [pc, #64]	@ (8002af4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d10c      	bne.n	8002ad2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002abe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40012c00 	.word	0x40012c00
 8002af4:	40000400 	.word	0x40000400

08002af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <memset>:
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4402      	add	r2, r0
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d100      	bne.n	8002b26 <memset+0xa>
 8002b24:	4770      	bx	lr
 8002b26:	f803 1b01 	strb.w	r1, [r3], #1
 8002b2a:	e7f9      	b.n	8002b20 <memset+0x4>

08002b2c <__libc_init_array>:
 8002b2c:	b570      	push	{r4, r5, r6, lr}
 8002b2e:	2600      	movs	r6, #0
 8002b30:	4d0c      	ldr	r5, [pc, #48]	@ (8002b64 <__libc_init_array+0x38>)
 8002b32:	4c0d      	ldr	r4, [pc, #52]	@ (8002b68 <__libc_init_array+0x3c>)
 8002b34:	1b64      	subs	r4, r4, r5
 8002b36:	10a4      	asrs	r4, r4, #2
 8002b38:	42a6      	cmp	r6, r4
 8002b3a:	d109      	bne.n	8002b50 <__libc_init_array+0x24>
 8002b3c:	f000 f81a 	bl	8002b74 <_init>
 8002b40:	2600      	movs	r6, #0
 8002b42:	4d0a      	ldr	r5, [pc, #40]	@ (8002b6c <__libc_init_array+0x40>)
 8002b44:	4c0a      	ldr	r4, [pc, #40]	@ (8002b70 <__libc_init_array+0x44>)
 8002b46:	1b64      	subs	r4, r4, r5
 8002b48:	10a4      	asrs	r4, r4, #2
 8002b4a:	42a6      	cmp	r6, r4
 8002b4c:	d105      	bne.n	8002b5a <__libc_init_array+0x2e>
 8002b4e:	bd70      	pop	{r4, r5, r6, pc}
 8002b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b54:	4798      	blx	r3
 8002b56:	3601      	adds	r6, #1
 8002b58:	e7ee      	b.n	8002b38 <__libc_init_array+0xc>
 8002b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b5e:	4798      	blx	r3
 8002b60:	3601      	adds	r6, #1
 8002b62:	e7f2      	b.n	8002b4a <__libc_init_array+0x1e>
 8002b64:	08002bb0 	.word	0x08002bb0
 8002b68:	08002bb0 	.word	0x08002bb0
 8002b6c:	08002bb0 	.word	0x08002bb0
 8002b70:	08002bb4 	.word	0x08002bb4

08002b74 <_init>:
 8002b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b76:	bf00      	nop
 8002b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7a:	bc08      	pop	{r3}
 8002b7c:	469e      	mov	lr, r3
 8002b7e:	4770      	bx	lr

08002b80 <_fini>:
 8002b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b82:	bf00      	nop
 8002b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b86:	bc08      	pop	{r3}
 8002b88:	469e      	mov	lr, r3
 8002b8a:	4770      	bx	lr
